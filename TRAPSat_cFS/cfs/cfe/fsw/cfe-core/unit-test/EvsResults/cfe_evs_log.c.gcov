        -:    0:Source:/home/wmoleski/CFS/mission_2014/cfe/fsw/cfe-core/src/evs/cfe_evs_log.c
        -:    0:Graph:cfe_evs_log.gcno
        -:    0:Data:cfe_evs_log.gcda
        -:    0:Runs:1
        -:    0:Programs:2
        -:    1:/*
        -:    2:**
        -:    3:**  File Name: cfe_evslog.c
        -:    4:**  $Id: cfe_evs_log.c.gcov 1.5 2015/06/24 12:19:35EDT wmoleski Exp  $
        -:    5:**
        -:    6:**
        -:    7:**
        -:    8:**      Copyright (c) 2004-2012, United States government as represented by the 
        -:    9:**      administrator of the National Aeronautics Space Administration.
        -:   10:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:   11:**      Space Flight Center pursuant to government contracts.
        -:   12:**
        -:   13:**      This is governed by the NASA Open Source Agreement and may be used, 
        -:   14:**      distributed and modified only pursuant to the terms of that agreement.
        -:   15:** 
        -:   16:**
        -:   17:**
        -:   18:**
        -:   19:**  Title: Event Services API - Log Control Interfaces
        -:   20:**
        -:   21:**  Purpose: This module defines the top level functions of the
        -:   22:**           Event Services Log control interfaces
        -:   23:**
        -:   24:** $Date: 2015/06/24 12:19:35EDT $
        -:   25:** $Revision: 1.5 $
        -:   26:** $Log: cfe_evs_log.c.gcov  $
        -:   26:** Revision 1.5 2015/06/24 12:19:35EDT wmoleski 
        -:   26:** Checking in the unit-test results for cFE 6.4.2.0
        -:   27:** Revision 1.11 2014/08/22 16:53:23GMT-05:00 lwalling 
        -:   28:** Change signed loop counters to unsigned
        -:   29:** Revision 1.10 2012/01/13 12:00:54EST acudmore 
        -:   30:** Changed license text to reflect open source
        -:   31:** Revision 1.9 2011/06/01 17:45:26EDT lwalling 
        -:   32:** Update Add Log Entry comments, Write Log File logic and events, Set Log Mode events
        -:   33:** Revision 1.8 2011/06/01 10:32:42EDT lwalling 
        -:   34:** Remove unused reference to internal ES header file
        -:   35:** Revision 1.7 2011/06/01 10:19:50EDT lwalling 
        -:   36:** Modify function CFE_EVS_WriteLogFileCmd() to match prototype
        -:   37:** Revision 1.6 2011/05/23 15:57:11EDT lwalling 
        -:   38:** Change startup to not fail if unable to create event log, verify reset area size and event log contents
        -:   39:** Revision 1.5 2011/04/05 16:33:42EDT lwalling 
        -:   40:** Optimize EVS use of string functions, plus other performance improvements
        -:   41:** Revision 1.4 2010/10/04 17:08:18EDT jmdagost 
        -:   42:** Cleaned up copyright symbol.
        -:   43:** Revision 1.3 2010/09/21 16:12:12EDT jmdagost 
        -:   44:** Added conditional statements around conditionally-used local variables.
        -:   45:** Revision 1.2 2009/06/10 09:12:42EDT acudmore 
        -:   46:** Converted OS_Mem* and OS_BSP* calls to CFE_PSP_*
        -:   47:** Revision 1.1 2008/04/17 08:05:12EDT ruperera 
        -:   48:** Initial revision
        -:   49:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/evs/project.pj
        -:   50:** Revision 1.24 2007/07/18 15:47:59EDT njyanchik 
        -:   51:** Jonathan added text into each error event in the two functions that write files (WriteLog and WriteAppData), as well as updated the doxygen comments in the header file
        -:   52:** Revision 1.23 2007/05/14 10:26:03EDT apcudmore 
        -:   53:** Preserve the EVS Local event log on a processor restart:
        -:   54:** - moved the EVS Log to the ES reset data structure
        -:   55:** - Added a couple of EVS Log related variables into the EVS_Log_t structure
        -:   56:** - Added a routine to the EVS early init to get a pointer to the EVS Log 
        -:   57:** - Added code to the EVS housekeeping service routine to copy Log variables into TLM
        -:   58:** Revision 1.22 2007/04/03 09:27:29EDT njyanchik 
        -:   59:** I added the SubType to the cFE file header for the event log and the write app data files in EVS
        -:   60:** Revision 1.21 2007/03/02 10:59:57EST njyanchik 
        -:   61:** The names of the command functions in cfe_evs_task.c didn't start with "CFE_", so that has been 
        -:   62:** fixed.
        -:   63:** Revision 1.20 2007/03/01 11:54:33EST njyanchik 
        -:   64:** This cp handles issues 1,6,7,8 as described in the DCR
        -:   65:** Revision 1.19 2006/11/14 15:02:55EST rjmcgraw 
        -:   66:** Removed file open check
        -:   67:** Revision 1.18 2006/10/20 16:26:59EDT kkaudra 
        -:   68:** Added cmd parameter for filenames
        -:   69:** Revision 1.17 2006/09/01 11:17:13EDT kkaudra 
        -:   70:** IV&V:Removed osapi-os-filesys.h
        -:   71:** Revision 1.16 2006/08/31 17:50:56EDT kkaudra 
        -:   72:** Added event messages to set log mode ()
        -:   73:** Revision 1.15 2006/06/08 14:14:53EDT njyanchik 
        -:   74:** added the appropriate legal headers to all of the evs files
        -:   75:**
        -:   76:*/
        -:   77:
        -:   78:/* Include Files */
        -:   79:#include "cfe_evs_task.h"     /* EVS internal definitions */
        -:   80:#include "cfe_evs_log.h"      /* EVS log file definitions */
        -:   81:#include "cfe_evs.h"          /* EVS API definitions */
        -:   82:#include "cfe_evs_utils.h"    /* EVS utility function definitions */
        -:   83:#include "cfe_fs.h"           /* File Service definitions */
        -:   84:#include "cfe_error.h"        /* cFE error code definitions */
        -:   85:#include "cfe_psp.h"          /* Get reset area function prototype */
        -:   86:
        -:   87:
        -:   88:#include <string.h>
        -:   89:
        -:   90:/* External Data */
        -:   91:extern CFE_EVS_GlobalData_t   CFE_EVS_GlobalData;
        -:   92:
        -:   93:
        -:   94:/*
        -:   95:**             Function Prologue
        -:   96:**
        -:   97:** Function Name:      EVS_AddLog
        -:   98:**
        -:   99:** Purpose:  This routine adds an event packet to the internal event log.
        -:  100:**
        -:  101:** Assumptions and Notes:
        -:  102:**
        -:  103:*/
        -:  104:void EVS_AddLog (CFE_EVS_Packet_t *EVS_PktPtr)
      155:  105:{
        -:  106:
      155:  107:   if (CFE_EVS_GlobalData.EVS_TlmPkt.LogEnabled == TRUE)
        -:  108:   {   
        -:  109:      /* Serialize access to event log control variables */
      129:  110:      OS_MutSemTake(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  111:
      132:  112:      if ((CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag == TRUE) &&
        -:  113:          (CFE_EVS_GlobalData.EVS_LogPtr->LogMode == CFE_EVS_LOG_DISCARD))
        -:  114:      {
        -:  115:         /* If log is full and in discard mode, just count the event */
        3:  116:         CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter++;
        -:  117:      }
        -:  118:      else
        -:  119:      {
      126:  120:         if (CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag == TRUE)
        -:  121:         {
        -:  122:            /* If log is full and in wrap mode, count it and store it */
        2:  123:            CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter++;
        -:  124:         }
        -:  125:
        -:  126:         /* Copy the event data to the next available entry in the log */
      126:  127:         CFE_PSP_MemCpy(&CFE_EVS_GlobalData.EVS_LogPtr->LogEntry[CFE_EVS_GlobalData.EVS_LogPtr->Next],
        -:  128:                        EVS_PktPtr, sizeof(CFE_EVS_Packet_t));
        -:  129:
      126:  130:         CFE_EVS_GlobalData.EVS_LogPtr->Next++;
        -:  131:
      126:  132:         if (CFE_EVS_GlobalData.EVS_LogPtr->Next >= CFE_EVS_LOG_MAX)
        -:  133:         {
        -:  134:            /* This is important, even if we are in discard mode */
        6:  135:            CFE_EVS_GlobalData.EVS_LogPtr->Next = 0;
        -:  136:         }
        -:  137:
        -:  138:         /* Log count cannot exceed the number of entries in the log */
      126:  139:         if (CFE_EVS_GlobalData.EVS_LogPtr->LogCount < CFE_EVS_LOG_MAX)
        -:  140:         {
       25:  141:            CFE_EVS_GlobalData.EVS_LogPtr->LogCount++;
        -:  142:
       25:  143:            if (CFE_EVS_GlobalData.EVS_LogPtr->LogCount == CFE_EVS_LOG_MAX)
        -:  144:            {
        -:  145:               /* The full flag and log count are somewhat redundant */
        1:  146:               CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag = TRUE;
        -:  147:            }
        -:  148:         }
        -:  149:      }
        -:  150:    
      129:  151:      OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  152:   }
        -:  153:
        -:  154:   return;
        -:  155:
        -:  156:} /* End EVS_AddLog */
        -:  157:
        -:  158:
        -:  159:/*
        -:  160:**             Function Prologue
        -:  161:**
        -:  162:** Function Name:      EVS_ClearLog
        -:  163:**
        -:  164:** Purpose:  This routine clears the contents of the internal event log.
        -:  165:**
        -:  166:** Assumptions and Notes:
        -:  167:**
        -:  168:*/
        -:  169:void EVS_ClearLog ( void )
        3:  170:{
        -:  171:
        -:  172:   /* Serialize access to event log control variables */
        3:  173:   OS_MutSemTake(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  174:
        -:  175:   /* Clears everything but LogMode (overwrite vs discard) */
        3:  176:   CFE_EVS_GlobalData.EVS_LogPtr->Next = 0;
        3:  177:   CFE_EVS_GlobalData.EVS_LogPtr->LogCount = 0;
        3:  178:   CFE_EVS_GlobalData.EVS_LogPtr->LogFullFlag = FALSE;
        3:  179:   CFE_EVS_GlobalData.EVS_LogPtr->LogOverflowCounter = 0;
        -:  180:
        3:  181:   CFE_PSP_MemSet(CFE_EVS_GlobalData.EVS_LogPtr->LogEntry, 0,
        -:  182:                  CFE_EVS_LOG_MAX * sizeof(CFE_EVS_Packet_t));
        -:  183:
        3:  184:   OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  185:
        -:  186:   return;
        -:  187:
        -:  188:} /* End EVS_ClearLog */
        -:  189:
        -:  190:
        -:  191:/*
        -:  192:**             Function Prologue
        -:  193:**
        -:  194:** Function Name:      CFE_EVS_WriteLogFileCmd
        -:  195:**
        -:  196:** Purpose:  This routine writes the contents of the internal event log to a file
        -:  197:**
        -:  198:** Assumptions and Notes:
        -:  199:**
        -:  200:*/
        -:  201:boolean CFE_EVS_WriteLogFileCmd ( CFE_EVS_LogFileCmd_t *CmdPtr )
        5:  202:{
        5:  203:   boolean         Result = FALSE;
        -:  204:   int32           LogIndex;
        -:  205:   int32           BytesWritten;
        -:  206:   int32           LogFileHandle;
        -:  207:   uint32          i;
        -:  208:   CFE_FS_Header_t LogFileHdr;
        -:  209:   char            LogFilename[OS_MAX_PATH_LEN];
        -:  210:
        -:  211:
        -:  212:   /* Serialize access to event log control variables */
        5:  213:   OS_MutSemTake(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  214:
        -:  215:   /* Copy the commanded filename into local buffer to ensure size limitation and to allow for modification */
        5:  216:   CFE_PSP_MemCpy(LogFilename, (void *)CmdPtr->LogFilename, OS_MAX_PATH_LEN);
        -:  217:
        -:  218:   /* Check to see if a default filename should be used */
        5:  219:   if (LogFilename[0] == '\0')
        -:  220:   {
        5:  221:       strncpy(LogFilename, CFE_EVS_DEFAULT_LOG_FILE, OS_MAX_PATH_LEN);
        -:  222:   }
        -:  223:
        -:  224:   /* Make sure all strings are null terminated before attempting to process them */
        5:  225:   LogFilename[OS_MAX_PATH_LEN-1] = '\0';
        -:  226:
        -:  227:   /* Create the log file */
        5:  228:   LogFileHandle = OS_creat(LogFilename, OS_WRITE_ONLY);
        -:  229:
        5:  230:   if (LogFileHandle < OS_FS_SUCCESS)
        -:  231:   {
        1:  232:      EVS_SendEvent(CFE_EVS_ERR_CRLOGFILE_EID, CFE_EVS_ERROR,
        -:  233:                   "Write Log File Command Error: OS_creat = 0x%08X, filename = %s",
        -:  234:                    LogFileHandle, LogFilename);
        -:  235:   }
        -:  236:   else
        -:  237:   {
        -:  238:      /* Initialize cFE file header for an event log file */
        4:  239:      CFE_PSP_MemSet(&LogFileHdr, 0, sizeof(CFE_FS_Header_t));
        4:  240:      strcpy(&LogFileHdr.Description[0], "cFE EVS Log File");
        4:  241:      LogFileHdr.SubType = CFE_FS_EVS_EVENTLOG_SUBTYPE;
        -:  242:
        -:  243:      /* Write the file header to the log file */
        4:  244:      BytesWritten = CFE_FS_WriteHeader(LogFileHandle, &LogFileHdr);
        -:  245:
        4:  246:      if (BytesWritten == sizeof(CFE_FS_Header_t))
        -:  247:      {
        -:  248:         /* Is the log full? -- Doesn't matter if wrap mode is enabled */
        4:  249:         if (CFE_EVS_GlobalData.EVS_LogPtr->LogCount == CFE_EVS_LOG_MAX)
        -:  250:         {
        -:  251:            /* Start with log entry that will be overwritten next (oldest) */
        3:  252:            LogIndex = CFE_EVS_GlobalData.EVS_LogPtr->Next;
        -:  253:         }
        -:  254:         else
        -:  255:         {
        -:  256:            /* Start with the first entry in the log (oldest) */
        1:  257:            LogIndex = 0;
        -:  258:         }
        -:  259:
        -:  260:         /* Write all the "in-use" event log entries to the file */
       90:  261:         for (i = 0; i < CFE_EVS_GlobalData.EVS_LogPtr->LogCount; i++)
        -:  262:         {
       42:  263:            BytesWritten = OS_write(LogFileHandle,
        -:  264:                                    &CFE_EVS_GlobalData.EVS_LogPtr->LogEntry[LogIndex],
        -:  265:                                    sizeof(CFE_EVS_Packet_t));
        -:  266:
       42:  267:            if (BytesWritten == sizeof(CFE_EVS_Packet_t))
        -:  268:            {
       41:  269:               LogIndex++;
        -:  270:
       41:  271:               if (LogIndex >= CFE_EVS_LOG_MAX)
        -:  272:               {
        2:  273:                  LogIndex = 0;
        -:  274:               }
        -:  275:            }
        -:  276:            else
        -:  277:            {
        1:  278:               EVS_SendEvent(CFE_EVS_ERR_WRLOGFILE_EID, CFE_EVS_ERROR,
        -:  279:                            "Write Log File Command Error: OS_write = 0x%08X, filename = %s",
        -:  280:                             BytesWritten, LogFilename);
        1:  281:               break;
        -:  282:            }
        -:  283:         }
        -:  284:
        -:  285:         /* Process command handler success result */
        4:  286:         if (i == CFE_EVS_GlobalData.EVS_LogPtr->LogCount)
        -:  287:         {
        3:  288:            EVS_SendEvent(CFE_EVS_WRLOG_EID, CFE_EVS_DEBUG,
        -:  289:                         "Write Log File Command: %d event log entries written to %s",
        -:  290:                          CFE_EVS_GlobalData.EVS_LogPtr->LogCount, LogFilename);
        3:  291:            Result = TRUE;
        -:  292:         }
        -:  293:      }
        -:  294:
        4:  295:      OS_close(LogFileHandle);
        -:  296:   }
        -:  297:
        5:  298:   OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  299:
        5:  300:   return(Result);
        -:  301:
        -:  302:} /* End CFE_EVS_WriteLogFileCmd */
        -:  303:
        -:  304:
        -:  305:/*
        -:  306:**             Function Prologue
        -:  307:**
        -:  308:** Function Name:      CFE_EVS_SetLoggingModeCmd
        -:  309:**
        -:  310:** Purpose:  This routine sets the internal event log mode.
        -:  311:**
        -:  312:** Assumptions and Notes:
        -:  313:**
        -:  314:*/
        -:  315:boolean CFE_EVS_SetLoggingModeCmd (CFE_EVS_ModeCmd_t *CmdPtr)
        5:  316:{
        5:  317:   boolean Status = TRUE;
        -:  318:
        9:  319:   if ((CmdPtr->Mode == CFE_EVS_LOG_OVERWRITE) || (CmdPtr->Mode == CFE_EVS_LOG_DISCARD))
        -:  320:   {
        -:  321:      /* Serialize access to event log control variables */
        4:  322:      OS_MutSemTake(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        4:  323:      CFE_EVS_GlobalData.EVS_LogPtr->LogMode = CmdPtr->Mode;
        4:  324:      OS_MutSemGive(CFE_EVS_GlobalData.EVS_SharedDataMutexID);
        -:  325:
        4:  326:      EVS_SendEvent(CFE_EVS_LOGMODE_EID, CFE_EVS_DEBUG,
        -:  327:                   "Set Log Mode Command: Log Mode = %d", CmdPtr->Mode);
        -:  328:   }
        -:  329:   else
        -:  330:   {
        1:  331:      Status = FALSE;
        1:  332:      EVS_SendEvent(CFE_EVS_ERR_LOGMODE_EID, CFE_EVS_ERROR,
        -:  333:                   "Set Log Mode Command Error: Log Mode = %d", CmdPtr->Mode);
        -:  334:   }
        -:  335:
        5:  336:   return Status;
        -:  337:
        -:  338:} /* End CFE_EVS_SetLoggingModeCmd */
        -:  339:
        -:  340:/* END EVSLOG.C */
