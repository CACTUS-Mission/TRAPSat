        -:    0:Source:/home/wmoleski/CFS/mission_2014/cfe/fsw/cfe-core/src/tbl/cfe_tbl_task.c
        -:    0:Graph:cfe_tbl_task.gcno
        -:    0:Data:cfe_tbl_task.gcda
        -:    0:Runs:1
        -:    0:Programs:4
        -:    1:/*
        -:    2:** $Id: cfe_tbl_task.c.gcov 1.10 2015/06/24 12:19:17EDT wmoleski Exp  $
        -:    3:**
        -:    4:**      Copyright (c) 2004-2012, United States government as represented by the 
        -:    5:**      administrator of the National Aeronautics Space Administration.  
        -:    6:**      All rights reserved. This software(cFE) was created at NASA's Goddard 
        -:    7:**      Space Flight Center pursuant to government contracts.
        -:    8:**
        -:    9:**      This is governed by the NASA Open Source Agreement and may be used, 
        -:   10:**      distributed and modified only pursuant to the terms of that agreement.
        -:   11:**  
        -:   12:**
        -:   13:** Subsystem: cFE TBL Task
        -:   14:**
        -:   15:** Author: David Kobe (the Hammers Company, Inc.)
        -:   16:**
        -:   17:** Notes:
        -:   18:**
        -:   19:** $Log: cfe_tbl_task.c.gcov  $
        -:   19:** Revision 1.10 2015/06/24 12:19:17EDT wmoleski 
        -:   19:** Checking in the unit-test results for cFE 6.4.2.0
        -:   20:** Revision 1.5 2012/01/18 16:32:58GMT-05:00 jmdagost 
        -:   21:** Updated init event msg to include cFE version numbers.
        -:   22:** Revision 1.4 2012/01/13 12:17:41EST acudmore 
        -:   23:** Changed license text to reflect open source
        -:   24:** Revision 1.3 2010/10/04 17:05:21EDT jmdagost 
        -:   25:** Cleaned up copyright symbol.
        -:   26:** Revision 1.2 2008/07/31 15:41:30EDT apcudmore 
        -:   27:** Added execution counter API:
        -:   28:**   -- Added execution counter to ES internal task data
        -:   29:**   -- Added code to increment counter in RunLoop
        -:   30:**   -- Added code to report counter in GetInfo APIs
        -:   31:**   -- Added API to increment counter for child tasks
        -:   32:**   -- Added code to cFE Core apps to increment counters.
        -:   33:** Revision 1.1 2008/04/17 08:05:35EDT ruperera 
        -:   34:** Initial revision
        -:   35:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/tbl/project.pj
        -:   36:** Revision 1.21 2007/05/15 10:58:04EDT rjmcgraw 
        -:   37:** Exit main loop for CFE_SB_RcvMsg errors
        -:   38:** Revision 1.20 2007/05/09 12:49:49EDT dlkobe 
        -:   39:** Added SysLog message to indicate SB error on Command Pipe
        -:   40:** Revision 1.19 2007/05/04 15:56:22EDT dlkobe 
        -:   41:** Added Delete CDS command
        -:   42:** Revision 1.18 2007/04/30 14:13:44EDT rjmcgraw 
        -:   43:** Standardized task initialization
        -:   44:** Revision 1.17 2007/04/09 14:45:59EDT rjmcgraw 
        -:   45:** Changed names of performance ids to include CFE_
        -:   46:** Revision 1.16 2006/10/31 12:21:43EST dlkobe 
        -:   47:** Removed all references to the TBL_MOD_DUMP_ONLY option command
        -:   48:** Revision 1.15 2006/06/21 12:23:22GMT-05:00 kkaudra 
        -:   49:** Removed cfe_es_perf.h
        -:   50:**
        -:   51:*/
        -:   52:
        -:   53:
        -:   54:/*
        -:   55:** Required header files
        -:   56:*/
        -:   57:#include "cfe.h"
        -:   58:#include "cfe_version.h"
        -:   59:#include "cfe_tbl_internal.h"
        -:   60:#include "cfe_tbl_events.h"
        -:   61:#include "cfe_tbl_msg.h"
        -:   62:#include "cfe_tbl_task_cmds.h"
        -:   63:#include "cfe_tbl_verify.h"
        -:   64:#include <string.h>
        -:   65:
        -:   66:
        -:   67:/*
        -:   68:** Table task global data
        -:   69:*/
        -:   70:CFE_TBL_TaskData_t    CFE_TBL_TaskData;
        -:   71:
        -:   72:
        -:   73:/*
        -:   74:** Table task const data
        -:   75:*/
        -:   76:#define CFE_TBL_BAD_CMD_CODE  (-1) /**< Command Code found in Message does not match any in #CFE_TBL_CmdHandlerTbl */
        -:   77:#define CFE_TBL_BAD_MSG_ID    (-2) /**< Message ID found in Message does not match any in #CFE_TBL_CmdHandlerTbl */
        -:   78:
        -:   79:typedef enum
        -:   80:{
        -:   81:    CFE_TBL_TERM_MSGTYPE=0,   /**< \brief Command Handler Table Terminator Type */
        -:   82:    CFE_TBL_MSG_MSGTYPE,      /**< \brief Message Type (requires Message ID match) */
        -:   83:    CFE_TBL_CMD_MSGTYPE       /**< \brief Command Type (requires Message ID and Command Code match) */
        -:   84:} CFE_TBL_MsgType_t;
        -:   85:
        -:   86:/**
        -:   87:** Data structure of a single record in #CFE_TBL_CmdHandlerTbl
        -:   88:*/
        -:   89:typedef struct {
        -:   90:    uint32                   MsgId;           /**< \brief Acceptable Message ID */
        -:   91:    uint32                   CmdCode;         /**< \brief Acceptable Command Code (if necessary) */
        -:   92:    uint32                   ExpectedLength;  /**< \brief Expected Message Length (in bytes) including message header */
        -:   93:    CFE_TBL_MsgProcFuncPtr_t MsgProcFuncPtr;  /**< \brief Pointer to function to handle message  */
        -:   94:    CFE_TBL_MsgType_t        MsgTypes;        /**< \brief Message Type (i.e. - with/without Cmd Code)   */
        -:   95:} CFE_TBL_CmdHandlerTblRec_t;
        -:   96:
        -:   97:/*
        -:   98:** Local function prototypes
        -:   99:**
        -:  100:** Note: Except for the entry point (CFE_TBL_TaskMain), these
        -:  101:**       functions are not called from any other source module.
        -:  102:*/
        -:  103:/*****************************************************************************/
        -:  104:/**
        -:  105:** \brief Entry Point for cFE Table Services Core Application
        -:  106:**
        -:  107:** \par Description
        -:  108:**        This is the entry point to the cFE Table Services Core Application.
        -:  109:**        This Application provides the ground interface to the cFE Table
        -:  110:**        Services.
        -:  111:** 
        -:  112:** \par Assumptions, External Events, and Notes:
        -:  113:**          None
        -:  114:**
        -:  115:** \retval None
        -:  116:******************************************************************************/
        -:  117:void  CFE_TBL_TaskMain(void);
        -:  118:
        -:  119:/*****************************************************************************/
        -:  120:/**
        -:  121:** \brief cFE Table Services Core Application Initialization
        -:  122:**
        -:  123:** \par Description
        -:  124:**        This function initializes all data associated with the cFE Table
        -:  125:**        Services Core Application.  It is only called when the Application
        -:  126:**        is first started.
        -:  127:** 
        -:  128:** \par Assumptions, External Events, and Notes:
        -:  129:**          None
        -:  130:**
        -:  131:** \return #CFE_SUCCESS  \copydoc CFE_SUCCESS
        -:  132:** \return Any of the return values from #CFE_EVS_Register
        -:  133:** \return Any of the return values from #CFE_SB_CreatePipe
        -:  134:** \return Any of the return values from #CFE_SB_Subscribe
        -:  135:** \return Any of the return values from #CFE_EVS_SendEvent
        -:  136:******************************************************************************/
        -:  137:
        -:  138:int32 CFE_TBL_TaskInit(void);
        -:  139:
        -:  140:/*****************************************************************************/
        -:  141:/**
        -:  142:** \brief Processes command pipe messages
        -:  143:**
        -:  144:** \par Description
        -:  145:**          Processes messages obtained from the command pipe.
        -:  146:** 
        -:  147:** \par Assumptions, External Events, and Notes:
        -:  148:**          None
        -:  149:**
        -:  150:** \param[in] MessagePtr a pointer to the message received from the command pipe
        -:  151:**                                      
        -:  152:** \retval None
        -:  153:******************************************************************************/
        -:  154:
        -:  155:void  CFE_TBL_TaskPipe(CFE_SB_Msg_t *MessagePtr);
        -:  156:
        -:  157:/*****************************************************************************/
        -:  158:/**
        -:  159:** \brief Table Service Application Data Initialization
        -:  160:**
        -:  161:** \par Description
        -:  162:**          Initializes all data necessary for the Table Service Application.
        -:  163:** 
        -:  164:** \par Assumptions, External Events, and Notes:
        -:  165:**          None
        -:  166:**
        -:  167:** \retval None
        -:  168:******************************************************************************/
        -:  169:
        -:  170:void  CFE_TBL_InitData(void);
        -:  171:
        -:  172:/* Utility Functions */
        -:  173:/*****************************************************************************/
        -:  174:/**
        -:  175:** \brief Compares message with #CFE_TBL_CmdHandlerTbl to identify the message
        -:  176:**
        -:  177:** \par Description
        -:  178:**          Searches the Command Handler Table for an entry matching the
        -:  179:**          message ID and, if necessary, the Command Code.  If an entry
        -:  180:**          is not located, an error code is returned.
        -:  181:** 
        -:  182:** \par Assumptions, External Events, and Notes:
        -:  183:**          None
        -:  184:**
        -:  185:** \param[in] MessageID message ID of command message received on command pipe
        -:  186:**
        -:  187:** \param[in] CommandCode command code from command message received on command pipe
        -:  188:**                                      
        -:  189:** \retval #CFE_SUCCESS          \copydoc CFE_SUCCESS
        -:  190:** \retval #CFE_TBL_BAD_CMD_CODE \copydoc CFE_TBL_BAD_CMD_CODE
        -:  191:** \retval #CFE_TBL_BAD_MSG_ID   \copydoc CFE_TBL_BAD_MSG_ID
        -:  192:**
        -:  193:******************************************************************************/
        -:  194:
        -:  195:int16 CFE_TBL_SearchCmdHndlrTbl(CFE_SB_MsgId_t MessageID, uint16 CommandCode);
        -:  196:
        -:  197:/* Constant Data */
        -:  198:
        -:  199:const CFE_TBL_CmdHandlerTblRec_t CFE_TBL_CmdHandlerTbl[] = {
        -:  200:/*        Message ID,    Command Code,                     Msg Size,            Function Ptr,  Msg/Cmd/Terminator */
        -:  201:{CFE_TBL_SEND_HK_MID,                      0,  sizeof(CFE_TBL_NoArgsCmd_t),CFE_TBL_HousekeepingCmd,CFE_TBL_MSG_MSGTYPE},
        -:  202:{    CFE_TBL_CMD_MID,        CFE_TBL_NOOP_CC,  sizeof(CFE_TBL_NoArgsCmd_t),        CFE_TBL_NoopCmd,CFE_TBL_CMD_MSGTYPE},
        -:  203:{    CFE_TBL_CMD_MID,       CFE_TBL_RESET_CC,  sizeof(CFE_TBL_NoArgsCmd_t),       CFE_TBL_ResetCmd,CFE_TBL_CMD_MSGTYPE},
        -:  204:{    CFE_TBL_CMD_MID,        CFE_TBL_LOAD_CC,    sizeof(CFE_TBL_LoadCmd_t),        CFE_TBL_LoadCmd,CFE_TBL_CMD_MSGTYPE},
        -:  205:{    CFE_TBL_CMD_MID,        CFE_TBL_DUMP_CC,    sizeof(CFE_TBL_DumpCmd_t),        CFE_TBL_DumpCmd,CFE_TBL_CMD_MSGTYPE},
        -:  206:{    CFE_TBL_CMD_MID,    CFE_TBL_VALIDATE_CC,sizeof(CFE_TBL_ValidateCmd_t),    CFE_TBL_ValidateCmd,CFE_TBL_CMD_MSGTYPE},
        -:  207:{    CFE_TBL_CMD_MID,    CFE_TBL_ACTIVATE_CC,sizeof(CFE_TBL_ActivateCmd_t),    CFE_TBL_ActivateCmd,CFE_TBL_CMD_MSGTYPE},
        -:  208:{    CFE_TBL_CMD_MID,    CFE_TBL_DUMP_REG_CC, sizeof(CFE_TBL_DumpRegCmd_t),     CFE_TBL_DumpRegCmd,CFE_TBL_CMD_MSGTYPE},
        -:  209:{    CFE_TBL_CMD_MID,     CFE_TBL_TLM_REG_CC,  sizeof(CFE_TBL_TlmRegCmd_t),      CFE_TBL_TlmRegCmd,CFE_TBL_CMD_MSGTYPE},
        -:  210:{    CFE_TBL_CMD_MID,  CFE_TBL_DELETE_CDS_CC,  sizeof(CFE_TBL_DelCDSCmd_t),   CFE_TBL_DeleteCDSCmd,CFE_TBL_CMD_MSGTYPE},
        -:  211:{    CFE_TBL_CMD_MID,  CFE_TBL_ABORT_LOAD_CC, sizeof(CFE_TBL_AbortLdCmd_t),   CFE_TBL_AbortLoadCmd,CFE_TBL_CMD_MSGTYPE},
        -:  212:{                  0,                      0,                            0,                   NULL,CFE_TBL_TERM_MSGTYPE}
        -:  213:};
        -:  214:
        -:  215:
        -:  216:/******************************************************************************/
        -:  217:
        -:  218:void CFE_TBL_TaskMain(void)
        2:  219:{
        -:  220:    int32  Status;
        -:  221:
        2:  222:    CFE_ES_PerfLogEntry(CFE_TBL_MAIN_PERF_ID);
        -:  223:
        2:  224:    Status = CFE_TBL_TaskInit();
        -:  225:    
        2:  226:    if(Status != CFE_SUCCESS)
        -:  227:    {
        1:  228:      CFE_ES_WriteToSysLog("TBL:Application Init Failed,RC=0x%08X\n", Status);      
        1:  229:      CFE_ES_PerfLogExit(CFE_TBL_MAIN_PERF_ID);      
        -:  230:      /* Note: CFE_ES_ExitApp will not return */
        1:  231:      CFE_ES_ExitApp(CFE_ES_CORE_APP_INIT_ERROR);
        -:  232:    }/* end if */
        -:  233:
        -:  234:    /*
        -:  235:     * Wait for other apps to start.
        -:  236:     * It is important that the core apps are present before this starts receiving
        -:  237:     * messages from the command pipe, as some of those handlers might depend on
        -:  238:     * the other core apps.
        -:  239:     */
        2:  240:    CFE_ES_WaitForStartupSync(CFE_CORE_MAX_STARTUP_MSEC);
        -:  241:
        -:  242:    /* Main loop */
        6:  243:    while (Status == CFE_SUCCESS)
        -:  244:    {
        -:  245:        /* Increment the Main task Execution Counter */
        2:  246:        CFE_ES_IncrementTaskCounter();
        -:  247:
        2:  248:        CFE_ES_PerfLogExit(CFE_TBL_MAIN_PERF_ID);
        -:  249:
        -:  250:        /* Pend on receipt of packet */
        2:  251:        Status = CFE_SB_RcvMsg( &CFE_TBL_TaskData.MsgPtr,
        -:  252:                                CFE_TBL_TaskData.CmdPipe,
        -:  253:                                CFE_SB_PEND_FOREVER);
        -:  254:
        2:  255:        CFE_ES_PerfLogEntry(CFE_TBL_MAIN_PERF_ID);
        -:  256:
        2:  257:        if (Status == CFE_SUCCESS)
        -:  258:        {
        -:  259:            /* Process cmd pipe msg */
        1:  260:            CFE_TBL_TaskPipe(CFE_TBL_TaskData.MsgPtr);
        -:  261:        }else{
        1:  262:            CFE_ES_WriteToSysLog("TBL:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  263:        }/* end if */
        -:  264:
        -:  265:    }/* end while */
        -:  266:
        -:  267:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  268:    CFE_ES_ExitApp(CFE_ES_CORE_APP_RUNTIME_ERROR);
        -:  269:
        2:  270:} /* end CFE_TBL_TaskMain() */
        -:  271:
        -:  272:
        -:  273:/******************************************************************************/
        -:  274:
        -:  275:int32 CFE_TBL_TaskInit(void)
        8:  276:{
        8:  277:    int32 Status = CFE_SUCCESS;
        -:  278:
        -:  279:    /*
        -:  280:    ** Register Table Services with ES
        -:  281:    */
        8:  282:    Status = CFE_ES_RegisterApp();
        -:  283:
        8:  284:    if(Status != CFE_SUCCESS)
        -:  285:    {
        1:  286:      CFE_ES_WriteToSysLog("TBL:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",Status);
        1:  287:      return Status;
        -:  288:    }/* end if */
        -:  289:    
        -:  290:    /*
        -:  291:    ** Initialize global Table Services data
        -:  292:    */
        7:  293:    CFE_TBL_InitData();
        -:  294:
        -:  295:    /*
        -:  296:    ** Register event filter table
        -:  297:    */
        7:  298:    Status = CFE_EVS_Register(NULL, 0, 0);
        -:  299:
        7:  300:    if(Status != CFE_SUCCESS)
        -:  301:    {
        1:  302:      CFE_ES_WriteToSysLog("TBL:Call to CFE_EVS_Register Failed:RC=0x%08X\n",Status);
        1:  303:      return Status;
        -:  304:    }/* end if */
        -:  305:    
        -:  306:    /*
        -:  307:    ** Create Software Bus message pipe
        -:  308:    */
        6:  309:    Status = CFE_SB_CreatePipe(&CFE_TBL_TaskData.CmdPipe,
        -:  310:                                CFE_TBL_TaskData.PipeDepth,
        -:  311:                                CFE_TBL_TaskData.PipeName);
        6:  312:    if(Status != CFE_SUCCESS)
        -:  313:    {
        1:  314:      CFE_ES_WriteToSysLog("TBL:Error creating cmd pipe:RC=0x%08X\n",Status);
        1:  315:      return Status;
        -:  316:    }/* end if */                                                                
        -:  317:
        -:  318:    /*
        -:  319:    ** Subscribe to Housekeeping request commands
        -:  320:    */
        5:  321:    Status = CFE_SB_Subscribe(CFE_TBL_SEND_HK_MID, CFE_TBL_TaskData.CmdPipe);
        -:  322:
        5:  323:    if(Status != CFE_SUCCESS)
        -:  324:    {
        1:  325:      CFE_ES_WriteToSysLog("TBL:Error subscribing to HK Request:RC=0x%08X\n",Status);
        1:  326:      return Status;
        -:  327:    }/* end if */
        -:  328:
        -:  329:    /*
        -:  330:    ** Subscribe to Table task ground command packets
        -:  331:    */
        4:  332:    Status = CFE_SB_Subscribe(CFE_TBL_CMD_MID, CFE_TBL_TaskData.CmdPipe);
        -:  333:
        4:  334:    if(Status != CFE_SUCCESS)
        -:  335:    {
        1:  336:      CFE_ES_WriteToSysLog("TBL:Error subscribing to gnd cmds:RC=0x%08X\n",Status);
        1:  337:      return Status;
        -:  338:    }/* end if */
        -:  339:    
        -:  340:    /*
        -:  341:    ** Task startup event message
        -:  342:    */
        3:  343:    Status = CFE_EVS_SendEvent(CFE_TBL_INIT_INF_EID, CFE_EVS_INFORMATION, "cFE TBL Initialized.  cFE Version %d.%d.%d.%d",
        -:  344:                               CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        -:  345:
        3:  346:    if(Status != CFE_SUCCESS)
        -:  347:    {
        1:  348:      CFE_ES_WriteToSysLog("TBL:Error sending init event:RC=0x%08X\n",Status);
        1:  349:      return Status;
        -:  350:    }/* end if */
        -:  351:
        2:  352:    return CFE_SUCCESS;
        -:  353:
        -:  354:} /* End of CFE_TBL_TaskInit() */
        -:  355:
        -:  356:
        -:  357:/******************************************************************************/
        -:  358:
        -:  359:void CFE_TBL_InitData(void)
        8:  360:{
        -:  361:    /* Initialize Counters */
        8:  362:    CFE_TBL_TaskData.CmdCounter = 0;
        8:  363:    CFE_TBL_TaskData.ErrCounter = 0;
        8:  364:    CFE_TBL_TaskData.SuccessValCtr = 0;
        8:  365:    CFE_TBL_TaskData.FailedValCtr = 0;
        -:  366:
        -:  367:    /* Get the assigned Application ID for the Table Services Task */
        8:  368:    CFE_ES_GetAppID(&CFE_TBL_TaskData.TableTaskAppId);
        -:  369:
        -:  370:    /* Initialize Command Pipe Parameters */
        8:  371:    CFE_TBL_TaskData.PipeDepth = CFE_TBL_TASK_PIPE_DEPTH;
        8:  372:    strncpy(CFE_TBL_TaskData.PipeName, CFE_TBL_TASK_PIPE_NAME, 16);
        -:  373:
        -:  374:    /* Initialize Packet Headers */
        8:  375:    CFE_SB_InitMsg(&CFE_TBL_TaskData.HkPacket,
        -:  376:                   CFE_TBL_HK_TLM_MID,
        -:  377:                   sizeof(CFE_TBL_HkPacket_t),
        -:  378:                   TRUE);
        -:  379:
        8:  380:    CFE_SB_InitMsg(&CFE_TBL_TaskData.TblRegPacket,
        -:  381:                   CFE_TBL_REG_TLM_MID,
        -:  382:                   sizeof(CFE_TBL_TblRegPacket_t),
        -:  383:                   TRUE);
        -:  384:
        8:  385:} /* End of CFE_TBL_InitData() */
        -:  386:
        -:  387:
        -:  388:/******************************************************************************/
        -:  389:
        -:  390:void CFE_TBL_TaskPipe(CFE_SB_Msg_t *MessagePtr)
        7:  391:{
        7:  392:    CFE_SB_MsgId_t       MessageID = CFE_SB_GetMsgId(MessagePtr);
        7:  393:    uint16               CommandCode = CFE_SB_GetCmdCode(MessagePtr);
        -:  394:    int16                CmdIndx;
        -:  395:    uint32               ActualLength;
        7:  396:    CFE_TBL_CmdProcRet_t CmdStatus = CFE_TBL_INC_ERR_CTR; /* Assume a failed command */
        -:  397:
        -:  398:    /* Search the Command Handler Table for a matching message */
        7:  399:    CmdIndx = CFE_TBL_SearchCmdHndlrTbl(MessageID, CommandCode);
        -:  400:
        -:  401:    /* Check to see if a matching command was found */
        7:  402:    if (CmdIndx >= 0)
        -:  403:    {
        -:  404:        /* Verify Message Length before processing */
        2:  405:        ActualLength = CFE_SB_GetTotalMsgLength(MessagePtr);
        2:  406:        if (ActualLength == CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength)
        -:  407:        {
        -:  408:            /* All checks have passed, call the appropriate message handler */
        1:  409:            CmdStatus = (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgProcFuncPtr)(MessagePtr);
        -:  410:        }
        -:  411:        else /* Bad Message Length */
        -:  412:        {
        1:  413:            CFE_EVS_SendEvent( CFE_TBL_LEN_ERR_EID, CFE_EVS_ERROR,
        -:  414:                               "Invalid msg length -- ID = 0x%04X, CC = %d, Len = %d (!= %d)",
        -:  415:                               MessageID, CommandCode, ActualLength,
        -:  416:                               CFE_TBL_CmdHandlerTbl[CmdIndx].ExpectedLength );
        -:  417:        }
        -:  418:
        -:  419:        /* Only update command counters when message has a command code */
        2:  420:        if (CFE_TBL_CmdHandlerTbl[CmdIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  421:        {
        2:  422:            if (CmdStatus == CFE_TBL_INC_CMD_CTR)
        -:  423:            {
        1:  424:                CFE_TBL_TaskData.CmdCounter++;
        -:  425:            }
        1:  426:            else if (CmdStatus == CFE_TBL_INC_ERR_CTR)
        -:  427:            {
        1:  428:                CFE_TBL_TaskData.ErrCounter++;
        -:  429:            }
        -:  430:        }
        -:  431:    }
        -:  432:    else
        -:  433:    {
        -:  434:        /* Determine whether event message should be */
        -:  435:        /* "Bad Command Code" or "Bad Message ID"    */
        5:  436:        if (CmdIndx == CFE_TBL_BAD_CMD_CODE)
        -:  437:        {
        1:  438:            CFE_EVS_SendEvent(CFE_TBL_CC1_ERR_EID, CFE_EVS_ERROR,
        -:  439:                              "Invalid command code -- ID = 0x%04X, CC = %d",
        -:  440:                              MessageID, CommandCode);
        -:  441:
        -:  442:            /* Update the command error counter */
        1:  443:            CFE_TBL_TaskData.ErrCounter++;
        -:  444:        }
        -:  445:        else  /* CmdIndx == CFE_TBL_BAD_MSG_ID */
        -:  446:        {
        4:  447:            CFE_EVS_SendEvent(CFE_TBL_MID_ERR_EID, CFE_EVS_ERROR,
        -:  448:                             "Invalid message ID -- ID = 0x%04X",
        -:  449:                              MessageID);
        -:  450:            /*
        -:  451:            ** Note: we only increment the command error counter when
        -:  452:            **    processing messages with command codes
        -:  453:            */
        -:  454:        }
        -:  455:    }
        -:  456:
        -:  457:    return;
        -:  458:
        -:  459:} /* End of CFE_TBL_TaskPipe() */
        -:  460:
        -:  461:
        -:  462:/******************************************************************************/
        -:  463:
        -:  464:int16 CFE_TBL_SearchCmdHndlrTbl( CFE_SB_MsgId_t MessageID, uint16 CommandCode )
       11:  465:{
       11:  466:    int16     TblIndx = CFE_TBL_BAD_CMD_CODE;
       11:  467:    boolean   FoundMsg = FALSE;
       11:  468:    boolean   FoundMatch = FALSE;
        -:  469:
        -:  470:    do
        -:  471:    {
        -:  472:        /* Point to next entry in Command Handler Table */
       91:  473:        TblIndx++;
        -:  474:
        -:  475:        /* Check to see if we found a matching Message ID */
       91:  476:        if ((CFE_TBL_CmdHandlerTbl[TblIndx].MsgId == MessageID) &&
        -:  477:            (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE))
        -:  478:        {
        -:  479:            /* Flag any found message IDs so that if there is an error,        */
        -:  480:            /* we can determine if it was a bad message ID or bad command code */
       24:  481:            FoundMsg = TRUE;
        -:  482:
        -:  483:            /* If entry in the Command Handler Table is a command entry, */
        -:  484:            /* then check for a matching command code                    */
       24:  485:            if (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes == CFE_TBL_CMD_MSGTYPE)
        -:  486:            {
       23:  487:                if (CFE_TBL_CmdHandlerTbl[TblIndx].CmdCode == CommandCode)
        -:  488:                {
        -:  489:                    /* Found matching message ID and Command Code */
        3:  490:                    FoundMatch = TRUE;
        -:  491:                }
        -:  492:            }
        -:  493:            else /* Message is not a command message with specific command code */
        -:  494:            {
        -:  495:                /* Automatically assume a match when legit */
        -:  496:                /* Message ID is all that is required      */
        1:  497:                FoundMatch = TRUE;
        -:  498:            }
        -:  499:        }
       91:  500:    } while ((!FoundMatch) && (CFE_TBL_CmdHandlerTbl[TblIndx].MsgTypes != CFE_TBL_TERM_MSGTYPE));
        -:  501:
        -:  502:    /* If we failed to find a match, return a negative index */
       11:  503:    if (!FoundMatch)
        -:  504:    {
        -:  505:        /* Determine if the message ID was bad or the command code */
        7:  506:        if (FoundMsg)
        -:  507:        {
        -:  508:            /* A matching message ID was found, so the command code must be bad */
        2:  509:            TblIndx = CFE_TBL_BAD_CMD_CODE;
        -:  510:        }
        -:  511:        else /* No matching message ID was found */
        -:  512:        {
        5:  513:            TblIndx = CFE_TBL_BAD_MSG_ID;
        -:  514:        }
        -:  515:    }
        -:  516:
       11:  517:    return TblIndx;
        -:  518:}   /* End of CFE_TBL_SearchCmdHndlrTbl() */
        -:  519:
        -:  520:
        -:  521:/************************/
        -:  522:/*  End of File Comment */
        -:  523:/************************/
        -:  524:
