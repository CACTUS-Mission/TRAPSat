        -:    0:Source:/home/wmoleski/CFS/mission_2014/cfe/fsw/cfe-core/src/time/cfe_time_task.c
        -:    0:Graph:cfe_time_task.gcno
        -:    0:Data:cfe_time_task.gcda
        -:    0:Runs:1
        -:    0:Programs:2
        -:    1:/*
        -:    2:** $Id: cfe_time_task.c.gcov 1.4 2015/06/24 12:19:29EDT wmoleski Exp  $
        -:    3:**
        -:    4:**
        -:    5:**      Copyright (c) 2004-2012, United States government as represented by the
        -:    6:**      administrator of the National Aeronautics Space Administration.
        -:    7:**      All rights reserved. This software(cFE) was created at NASA's Goddard
        -:    8:**      Space Flight Center pursuant to government contracts.
        -:    9:**
        -:   10:**      This is governed by the NASA Open Source Agreement and may be used,
        -:   11:**      distributed and modified only pursuant to the terms of that agreement.
        -:   12:**
        -:   13:**
        -:   14:**
        -:   15:**
        -:   16:** Subsystem: cFE TIME Task
        -:   17:**
        -:   18:** Author: S. Walling (Microtel)
        -:   19:**
        -:   20:** Notes:
        -:   21:**
        -:   22:** $Log: cfe_time_task.c.gcov  $
        -:   22:** Revision 1.4 2015/06/24 12:19:29EDT wmoleski 
        -:   22:** Checking in the unit-test results for cFE 6.4.2.0
        -:   23:** Revision 1.8 2014/04/14 10:51:39GMT-05:00 lwalling 
        -:   24:** Created platform config definitions for Time 1HZ and Time TONE task priorities and stack sizes
        -:   25:** Revision 1.7 2012/09/28 16:31:14EDT aschoeni 
        -:   26:** Removed Interrupt Enable fixme
        -:   27:** Revision 1.6 2012/01/18 16:33:35EST jmdagost 
        -:   28:** Updated no-op event msg to include cFE version numbers.
        -:   29:** Revision 1.5 2012/01/13 12:21:35EST acudmore 
        -:   30:** Changed license text to reflect open source
        -:   31:** Revision 1.4 2011/11/30 15:10:04EST jmdagost 
        -:   32:** Replaced ifdef/ifndef preprocessor tests with if...==TRUE/if...!=TRUE tests
        -:   33:** Revision 1.3 2009/06/08 16:13:07EDT lwalling 
        -:   34:** Change 1Hz adjust cmd arg from micro-seconds to sub-seconds
        -:   35:** Revision 1.2 2008/07/31 15:41:26EDT apcudmore 
        -:   36:** Added execution counter API:
        -:   37:**   -- Added execution counter to ES internal task data
        -:   38:**   -- Added code to increment counter in RunLoop
        -:   39:**   -- Added code to report counter in GetInfo APIs
        -:   40:**   -- Added API to increment counter for child tasks
        -:   41:**   -- Added code to cFE Core apps to increment counters.
        -:   42:** Revision 1.1 2008/04/17 08:05:39EDT ruperera 
        -:   43:** Initial revision
        -:   44:** Member added to project c:/MKSDATA/MKS-REPOSITORY/MKS-CFE-PROJECT/fsw/cfe-core/src/time/project.pj
        -:   45:** Revision 1.28 2007/09/21 15:40:15EDT David Kobe (dlkobe) 
        -:   46:** Modified pointer type definitions to eliminate Linux gcc compile warnings
        -:   47:** Revision 1.27 2007/07/18 10:23:55EDT njyanchik 
        -:   48:** I changed the 'Result' variable to 'Status in the ifdef.
        -:   49:** Revision 1.26 2007/05/15 11:00:14EDT rjmcgraw 
        -:   50:** DCR78:11 Exit main loop for CFE_SB_RcvMsg errors
        -:   51:** Revision 1.25 2007/04/27 16:59:26EDT rjmcgraw 
        -:   52:** DCR2987:4 Standardize task init error code
        -:   53:** Revision 1.24 2007/04/27 12:31:04EDT njyanchik 
        -:   54:** I changed EVS and TIME to not have a telemetry counter for SB pipe reads in the main loop. 
        -:   55:** Instead, I have added a syslog message to state the problem
        -:   56:** Revision 1.23 2007/04/13 16:22:05EDT apcudmore 
        -:   57:** Changed EarlyInit function prototype to return int32 status.
        -:   58:** Revision 1.22 2007/04/11 11:02:05EDT njyanchik 
        -:   59:** Remove the TaskDelay in the main loop for TIME. I also addeda counterin telemtry that will
        -:   60:** notify the ground of an error in reading the command pipe.
        -:   61:** Revision 1.21 2007/04/09 14:47:52EDT rjmcgraw 
        -:   62:** Changed names of performance ids to include CFE_
        -:   63:** Revision 1.20 2007/02/01 16:10:03EST rjmcgraw 
        -:   64:** Changed time and tone pkt subscriptions to local for server
        -:   65:** Revision 1.19 2006/11/01 11:33:17EST njyanchik 
        -:   66:** This change removes any references to the CDS in TIME. TIME now uses  the ES
        -:   67:** Reset Area to store its critial variables. this was due to an issue of trying to call
        -:   68:** CDS functions before apps were registered (in the EarlyInit call).
        -:   69:** Revision 1.18 2006/07/28 09:17:15GMT-05:00 njyanchik 
        -:   70:** Fix of LDRA errors
        -:   71:** Revision 1.17 2006/06/21 13:24:12EDT kkaudra 
        -:   72:** Removed cfe_es_perf.h
        -:   73:** Revision 1.16 2006/06/13 16:28:07EDT rjmcgraw 
        -:   74:** osperf to perf changes
        -:   75:*/
        -:   76:
        -:   77:
        -:   78:/*
        -:   79:** Required header files...
        -:   80:*/
        -:   81:#include "cfe_time_utils.h"
        -:   82:#include "cfe_version.h"
        -:   83:
        -:   84:/*
        -:   85:** Time task global data...
        -:   86:*/
        -:   87:CFE_TIME_TaskData_t CFE_TIME_TaskData;
        -:   88:
        -:   89:
        -:   90:/*
        -:   91:** Local function prototypes...
        -:   92:**
        -:   93:** Note: Except for the early API initialization and main
        -:   94:**       task entry point functions (which are specified
        -:   95:**       in the ES startup script), none of the following
        -:   96:**       functions are called from any other source module.
        -:   97:*/
        -:   98:int32  CFE_TIME_EarlyInit(void);
        -:   99:void  CFE_TIME_TaskMain(void);
        -:  100:int32 CFE_TIME_TaskInit(void);
        -:  101:void  CFE_TIME_TaskPipe(CFE_SB_MsgPtr_t MessagePtr);
        -:  102:
        -:  103:/*
        -:  104:** Command handler for "HK request"...
        -:  105:*/
        -:  106:void  CFE_TIME_HousekeepingCmd(void);
        -:  107:
        -:  108:/*
        -:  109:** Command handler for "tone signal detected"...
        -:  110:*/
        -:  111:void  CFE_TIME_ToneSignalCmd(void);
        -:  112:
        -:  113:/*
        -:  114:** Command handler for "time at the tone"...
        -:  115:*/
        -:  116:void  CFE_TIME_ToneDataCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  117:
        -:  118:/*
        -:  119:** Command handler for "fake tone"...
        -:  120:*/
        -:  121:#if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  122:void CFE_TIME_FakeToneCmd(void);
        -:  123:#endif
        -:  124:
        -:  125:/*
        -:  126:** Command handler for "request time at the tone"...
        -:  127:**
        -:  128:** Note: This command (sent by the scheduler) is used to
        -:  129:**       signal that now is the right time (in relation
        -:  130:**       to the "real" tone signal) for a Time Server to
        -:  131:**       send the "time at the tone" data packet.  We do
        -:  132:**       not need (or want) this command if we are not a
        -:  133:**       Time Server, or if we are configured to operate
        -:  134:**       in "fake tone" mode, or if we are configured to
        -:  135:**       get time data from an external source.
        -:  136:*/
        -:  137:#if (CFE_TIME_CFG_SERVER == TRUE)
        -:  138:  #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  139:    #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  140:void CFE_TIME_ToneSendCmd(void);
        -:  141:    #endif
        -:  142:  #endif
        -:  143:#endif
        -:  144:
        -:  145:/*
        -:  146:** Ground command handlers...
        -:  147:*/
        -:  148:void CFE_TIME_NoopCmd(void);
        -:  149:void CFE_TIME_ResetCmd(void);
        -:  150:void CFE_TIME_DiagCmd(void);
        -:  151:void CFE_TIME_SetStateCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  152:void CFE_TIME_SetSourceCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  153:void CFE_TIME_SetSignalCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  154:void CFE_TIME_SetDelayCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  155:void CFE_TIME_SetTimeCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  156:void CFE_TIME_SetMETCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  157:void CFE_TIME_SetSTCFCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  158:void CFE_TIME_SetLeapsCmd(CFE_SB_MsgPtr_t MessagePtr);
        -:  159:void CFE_TIME_AdjustCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  160:void CFE_TIME_1HzAdjCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction);
        -:  161:
        -:  162:
        -:  163:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  164:/*                                                                 */
        -:  165:/* CFE_TIME_EarlyInit() -- API initialization before any tasks     */
        -:  166:/*                                                                 */
        -:  167:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  168:
        -:  169:int32 CFE_TIME_EarlyInit(void)
        1:  170:{
        -:  171:    /*
        -:  172:    ** Initialize global Time Services data...
        -:  173:    */
        1:  174:    CFE_TIME_InitData();
        -:  175:
        1:  176:    return ( CFE_SUCCESS);
        -:  177:
        -:  178:} /* End of CFE_TIME_EarlyInit() */
        -:  179:
        -:  180:
        -:  181:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  182:/*                                                                 */
        -:  183:/* CFE_TIME_TaskMain() -- Task entry point and main process loop   */
        -:  184:/*                                                                 */
        -:  185:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  186:
        -:  187:void CFE_TIME_TaskMain(void)
        2:  188:{
        -:  189:    int32  Status;
        -:  190:  
        2:  191:    CFE_ES_PerfLogEntry(CFE_TIME_MAIN_PERF_ID);
        -:  192:  
        2:  193:    Status = CFE_TIME_TaskInit();
        -:  194:    
        2:  195:    if(Status != CFE_SUCCESS)
        -:  196:    {
        1:  197:      CFE_ES_WriteToSysLog("TIME:Application Init Failed,RC=0x%08X\n", Status);      
        1:  198:      CFE_ES_PerfLogExit(CFE_TIME_MAIN_PERF_ID);
        -:  199:      /* Note: CFE_ES_ExitApp will not return */      
        1:  200:      CFE_ES_ExitApp(CFE_ES_CORE_APP_INIT_ERROR);
        -:  201:    }/* end if */
        -:  202:  
        -:  203:    /*
        -:  204:     * Wait for other apps to start.
        -:  205:     * It is important that the core apps are present before this starts receiving
        -:  206:     * messages from the command pipe, as some of those handlers might depend on
        -:  207:     * the other core apps.
        -:  208:     */
        2:  209:    CFE_ES_WaitForStartupSync(CFE_CORE_MAX_STARTUP_MSEC);
        -:  210:
        -:  211:    /* Main loop */
        6:  212:    while (Status == CFE_SUCCESS)
        -:  213:    {
        -:  214:    
        -:  215:      /* Increment the Main task Execution Counter */
        2:  216:      CFE_ES_IncrementTaskCounter();
        -:  217:
        2:  218:      CFE_ES_PerfLogExit(CFE_TIME_MAIN_PERF_ID);
        -:  219:  
        -:  220:      /* Pend on receipt of packet */
        2:  221:      Status = CFE_SB_RcvMsg(&CFE_TIME_TaskData.MsgPtr,
        -:  222:                              CFE_TIME_TaskData.CmdPipe,
        -:  223:                              CFE_SB_PEND_FOREVER);
        -:  224:  
        2:  225:      CFE_ES_PerfLogEntry(CFE_TIME_MAIN_PERF_ID);
        -:  226:  
        2:  227:      if (Status == CFE_SUCCESS)
        -:  228:      {
        -:  229:          /* Process cmd pipe msg */
        1:  230:          CFE_TIME_TaskPipe(CFE_TIME_TaskData.MsgPtr);
        -:  231:      }else{
        1:  232:          CFE_ES_WriteToSysLog("TIME:Error reading cmd pipe,RC=0x%08X\n",Status);
        -:  233:      }/* end if */
        -:  234:      
        -:  235:    }/* end while */
        -:  236:    
        -:  237:    /* while loop exits only if CFE_SB_RcvMsg returns error */
        2:  238:    CFE_ES_ExitApp(CFE_ES_CORE_APP_RUNTIME_ERROR);
        -:  239:
        2:  240:} /* end CFE_TIME_TaskMain */
        -:  241:
        -:  242:
        -:  243:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  244:/*                                                                 */
        -:  245:/* CFE_TIME_TaskInit() -- Time task initialization                 */
        -:  246:/*                                                                 */
        -:  247:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  248:
        -:  249:int32 CFE_TIME_TaskInit(void)
       16:  250:{
       16:  251:    int32 Status = CFE_SUCCESS;
        -:  252:
       16:  253:    Status = CFE_ES_RegisterApp();
       16:  254:    if(Status != CFE_SUCCESS)
        -:  255:    {
        2:  256:      CFE_ES_WriteToSysLog("TIME:Call to CFE_ES_RegisterApp Failed:RC=0x%08X\n",Status);
        2:  257:      return Status;
        -:  258:    }/* end if */
        -:  259:    
       14:  260:    Status = CFE_EVS_Register(NULL, 0, 0);
       14:  261:    if(Status != CFE_SUCCESS)
        -:  262:    {
        1:  263:      CFE_ES_WriteToSysLog("TIME:Call to CFE_EVS_Register Failed:RC=0x%08X\n",Status);
        1:  264:      return Status;
        -:  265:    }/* end if */
        -:  266:    
       13:  267:    Status = OS_BinSemCreate(&CFE_TIME_TaskData.ToneSemaphore,
        -:  268:                              CFE_TIME_SEM_TONE_NAME,
        -:  269:                              CFE_TIME_SEM_VALUE,
        -:  270:                              CFE_TIME_SEM_OPTIONS);
       13:  271:    if(Status != CFE_SUCCESS)
        -:  272:    {
        1:  273:      CFE_ES_WriteToSysLog("TIME:Error creating tone semaphore:RC=0x%08X\n",Status);
        1:  274:      return Status;
        -:  275:    }/* end if */        
        -:  276:    
       12:  277:    Status = OS_BinSemCreate(&CFE_TIME_TaskData.LocalSemaphore,
        -:  278:                              CFE_TIME_SEM_1HZ_NAME,
        -:  279:                              CFE_TIME_SEM_VALUE,
        -:  280:                              CFE_TIME_SEM_OPTIONS);
       12:  281:    if(Status != CFE_SUCCESS)
        -:  282:    {
        1:  283:      CFE_ES_WriteToSysLog("TIME:Error creating local semaphore:RC=0x%08X\n",Status);
        1:  284:      return Status;
        -:  285:    }/* end if */
        -:  286:    
        -:  287:    
       11:  288:    Status = CFE_ES_CreateChildTask(&CFE_TIME_TaskData.ToneTaskID,
        -:  289:                                     CFE_TIME_TASK_TONE_NAME,
        -:  290:                                     CFE_TIME_Tone1HzTask,
        -:  291:                                     CFE_TIME_TASK_STACK_PTR,
        -:  292:                                     CFE_TIME_TONE_TASK_STACK_SIZE,
        -:  293:                                     CFE_TIME_TONE_TASK_PRIORITY,
        -:  294:                                     CFE_TIME_TASK_FLAGS);
       11:  295:    if(Status != CFE_SUCCESS)
        -:  296:    {
        1:  297:      CFE_ES_WriteToSysLog("TIME:Error creating tone 1Hz child task:RC=0x%08X\n",Status);
        1:  298:      return Status;
        -:  299:    }/* end if */
        -:  300:    
        -:  301:        
       10:  302:    Status = CFE_ES_CreateChildTask(&CFE_TIME_TaskData.LocalTaskID,
        -:  303:                                     CFE_TIME_TASK_1HZ_NAME,
        -:  304:                                     CFE_TIME_Local1HzTask,
        -:  305:                                     CFE_TIME_TASK_STACK_PTR,
        -:  306:                                     CFE_TIME_1HZ_TASK_STACK_SIZE,
        -:  307:                                     CFE_TIME_1HZ_TASK_PRIORITY,
        -:  308:                                     CFE_TIME_TASK_FLAGS);
       10:  309:    if(Status != CFE_SUCCESS)
        -:  310:    {
        1:  311:      CFE_ES_WriteToSysLog("TIME:Error creating local 1Hz child task:RC=0x%08X\n",Status);
        1:  312:      return Status;
        -:  313:    }/* end if */
        -:  314:
        -:  315:
        9:  316:    Status = CFE_SB_CreatePipe(&CFE_TIME_TaskData.CmdPipe,
        -:  317:                                CFE_TIME_TaskData.PipeDepth,
        -:  318:                                CFE_TIME_TaskData.PipeName);
        9:  319:    if(Status != CFE_SUCCESS)
        -:  320:    {
        1:  321:      CFE_ES_WriteToSysLog("TIME:Error creating cmd pipe:RC=0x%08X\n",Status);
        1:  322:      return Status;
        -:  323:    }/* end if */
        -:  324:
        -:  325:
        8:  326:    Status = CFE_SB_Subscribe(CFE_TIME_SEND_HK_MID,
        -:  327:                              CFE_TIME_TaskData.CmdPipe);
        8:  328:    if(Status != CFE_SUCCESS)
        -:  329:    {
        1:  330:      CFE_ES_WriteToSysLog("TIME:Error subscribing to HK Request:RC=0x%08X\n",Status);
        1:  331:      return Status;
        -:  332:    }/* end if */
        -:  333:
        -:  334:
        -:  335:    /*
        -:  336:    ** Subscribe to time at the tone "signal" commands...
        -:  337:    */
        -:  338:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  339:    Status = CFE_SB_Subscribe(CFE_TIME_TONE_CMD_MID,
        -:  340:                              CFE_TIME_TaskData.CmdPipe);
        -:  341:    #endif
        -:  342:    
        -:  343:    #if (CFE_TIME_CFG_SERVER == TRUE)
        7:  344:    Status = CFE_SB_SubscribeLocal(CFE_TIME_TONE_CMD_MID,
        -:  345:                              CFE_TIME_TaskData.CmdPipe,4);
        -:  346:    #endif
        7:  347:    if(Status != CFE_SUCCESS)
        -:  348:    {
        1:  349:      CFE_ES_WriteToSysLog("TIME:Error subscribing to tone cmd:RC=0x%08X\n",Status);
        1:  350:      return Status;
        -:  351:    }/* end if */
        -:  352:
        -:  353:
        -:  354:    /*
        -:  355:    ** Subscribe to time at the tone "data" commands...
        -:  356:    */
        -:  357:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  358:    Status = CFE_SB_Subscribe(CFE_TIME_DATA_CMD_MID,
        -:  359:                              CFE_TIME_TaskData.CmdPipe);
        -:  360:    #endif
        -:  361:    
        -:  362:    #if (CFE_TIME_CFG_SERVER == TRUE)
        6:  363:    Status = CFE_SB_SubscribeLocal(CFE_TIME_DATA_CMD_MID,
        -:  364:                              CFE_TIME_TaskData.CmdPipe,4);
        -:  365:    #endif
        6:  366:    if(Status != CFE_SUCCESS)
        -:  367:    {
        1:  368:      CFE_ES_WriteToSysLog("TIME:Error subscribing to time data cmd:RC=0x%08X\n",Status);
        1:  369:      return Status;
        -:  370:    }/* end if */
        -:  371:    
        -:  372:    
        -:  373:    /*
        -:  374:    ** Subscribe to "fake" tone signal commands...
        -:  375:    */
        -:  376:    #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  377:
        -:  378:    #if (CFE_TIME_CFG_CLIENT == TRUE)
        -:  379:    Status = CFE_SB_Subscribe(CFE_TIME_FAKE_CMD_MID,
        -:  380:                              CFE_TIME_TaskData.CmdPipe);
        -:  381:    #endif
        -:  382:    
        -:  383:    #if (CFE_TIME_CFG_SERVER == TRUE)
        5:  384:    Status = CFE_SB_SubscribeLocal(CFE_TIME_FAKE_CMD_MID,
        -:  385:                                   CFE_TIME_TaskData.CmdPipe,4);
        -:  386:    #endif
        -:  387:    
        5:  388:    if(Status != CFE_SUCCESS)
        -:  389:    {
        1:  390:      CFE_ES_WriteToSysLog("TIME:Error subscribing to fake tone signal cmds:RC=0x%08X\n",Status);
        1:  391:      return Status;
        -:  392:    }/* end if */    
        -:  393:    #endif    
        -:  394:    
        -:  395:    
        -:  396:    /*
        -:  397:    ** Subscribe to time at the tone "request data" commands...
        -:  398:    */
        -:  399:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  400:      #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  401:        #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  402:
        -:  403:        
        -:  404:   Status = CFE_SB_Subscribe(CFE_TIME_SEND_CMD_MID,
        -:  405:                                  CFE_TIME_TaskData.CmdPipe);
        -:  406:        if(Status != CFE_SUCCESS)
        -:  407:        {
        -:  408:          CFE_ES_WriteToSysLog("TIME:Error subscribing to time at the tone request data cmds:RC=0x%08X\n",Status);
        -:  409:          return Status;
        -:  410:        }/* end if */
        -:  411:
        -:  412:        #endif
        -:  413:      #endif
        -:  414:    #endif
        -:  415:
        -:  416:    /*
        -:  417:    ** Subscribe to Time task ground command packets...
        -:  418:    */
        4:  419:    Status = CFE_SB_Subscribe(CFE_TIME_CMD_MID,
        -:  420:                              CFE_TIME_TaskData.CmdPipe);
        4:  421:    if(Status != CFE_SUCCESS)
        -:  422:    {
        1:  423:      CFE_ES_WriteToSysLog("TIME:Error subscribing to time task gnd cmds:RC=0x%08X\n",Status);
        1:  424:      return Status;
        -:  425:    }/* end if */  
        -:  426:
        -:  427:
        3:  428:    Status = CFE_EVS_SendEvent(CFE_TIME_INIT_EID,
        -:  429:                               CFE_EVS_INFORMATION,
        -:  430:                               "cFE TIME Initialized");
        3:  431:    if(Status != CFE_SUCCESS)
        -:  432:    {
        1:  433:      CFE_ES_WriteToSysLog("TIME:Error sending init event:RC=0x%08X\n",Status);
        1:  434:      return Status;
        -:  435:    }/* end if */
        -:  436:
        -:  437:    /*
        -:  438:    ** Select primary vs redundant tone interrupt signal...
        -:  439:    */
        -:  440:    #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -:  441:    OS_SelectTone(CFE_TIME_TaskData.ClockSignal);
        -:  442:    #endif
        -:  443:
        2:  444:    return CFE_SUCCESS;
        -:  445:
        -:  446:} /* End of CFE_TIME_TaskInit() */
        -:  447:
        -:  448:
        -:  449:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  450:/*                                                                 */
        -:  451:/* CFE_TIME_TaskPipe() -- Process command pipe message             */
        -:  452:/*                                                                 */
        -:  453:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  454:
        -:  455:void CFE_TIME_TaskPipe(CFE_SB_MsgPtr_t MessagePtr)
       43:  456:{
        -:  457:    CFE_SB_MsgId_t MessageID;
        -:  458:    uint16 CommandCode;
        -:  459:
       43:  460:    MessageID = CFE_SB_GetMsgId(MessagePtr);
       43:  461:    switch (MessageID)
        -:  462:    {
        -:  463:        /*
        -:  464:        ** Housekeeping telemetry request...
        -:  465:        */
        -:  466:        case CFE_TIME_SEND_HK_MID:
        1:  467:            CFE_TIME_HousekeepingCmd();
        1:  468:            break;
        -:  469:
        -:  470:        /*
        -:  471:        ** Time at the tone "signal"...
        -:  472:        */
        -:  473:        case CFE_TIME_TONE_CMD_MID:
        2:  474:            CFE_TIME_ToneSignalCmd();
        2:  475:            break;
        -:  476:
        -:  477:        /*
        -:  478:        ** Time at the tone "data"...
        -:  479:        */
        -:  480:        case CFE_TIME_DATA_CMD_MID:
        5:  481:            CFE_TIME_ToneDataCmd(MessagePtr);
        5:  482:            break;
        -:  483:
        -:  484:        /*
        -:  485:        ** Simulate time at the tone "signal"...
        -:  486:        */
        -:  487:        #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  488:        case CFE_TIME_FAKE_CMD_MID:
        2:  489:            CFE_TIME_FakeToneCmd();
        2:  490:            break;
        -:  491:        #endif
        -:  492:
        -:  493:        /*
        -:  494:        ** Request for time at the tone "data"...
        -:  495:        */
        -:  496:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  497:          #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  498:            #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  499:        case CFE_TIME_SEND_CMD_MID:
        -:  500:            CFE_TIME_ToneSendCmd();
        -:  501:            break;
        -:  502:            #endif
        -:  503:          #endif
        -:  504:        #endif
        -:  505:
        -:  506:        /*
        -:  507:        ** Time task ground commands...
        -:  508:        */
        -:  509:        case CFE_TIME_CMD_MID:
        -:  510:
       29:  511:            CommandCode = CFE_SB_GetCmdCode(MessagePtr);
       29:  512:            switch (CommandCode)
        -:  513:            {
        -:  514:                case CFE_TIME_NOOP_CC:
        1:  515:                    CFE_TIME_NoopCmd();
        1:  516:                    break;
        -:  517:
        -:  518:                case CFE_TIME_RESET_CC:
        1:  519:                    CFE_TIME_ResetCmd();
        1:  520:                    break;
        -:  521:
        -:  522:                case CFE_TIME_DIAG_TLM_CC:
        1:  523:                    CFE_TIME_DiagCmd();
        1:  524:                    break;
        -:  525:
        -:  526:                case CFE_TIME_SET_STATE_CC:
        4:  527:                    CFE_TIME_SetStateCmd(MessagePtr);
        4:  528:                    break;
        -:  529:
        -:  530:                case CFE_TIME_SET_SOURCE_CC:
        3:  531:                    CFE_TIME_SetSourceCmd(MessagePtr);
        3:  532:                    break;
        -:  533:
        -:  534:                case CFE_TIME_SET_SIGNAL_CC:
        3:  535:                    CFE_TIME_SetSignalCmd(MessagePtr);
        3:  536:                    break;
        -:  537:
        -:  538:                /*
        -:  539:                ** Time Clients process "tone delay" commands...
        -:  540:                */
        -:  541:                case CFE_TIME_ADD_DELAY_CC:
        2:  542:                    CFE_TIME_SetDelayCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        2:  543:                    break;
        -:  544:
        -:  545:                case CFE_TIME_SUB_DELAY_CC:
        1:  546:                    CFE_TIME_SetDelayCmd(MessagePtr, (int16) CFE_TIME_SUB_ADJUST);
        1:  547:                    break;
        -:  548:
        -:  549:                /*
        -:  550:                ** Time Servers process "set time" commands...
        -:  551:                */
        -:  552:                case CFE_TIME_SET_TIME_CC:
        2:  553:                    CFE_TIME_SetTimeCmd(MessagePtr);
        2:  554:                    break;
        -:  555:
        -:  556:                case CFE_TIME_SET_MET_CC:
        2:  557:                    CFE_TIME_SetMETCmd(MessagePtr);
        2:  558:                    break;
        -:  559:
        -:  560:                case CFE_TIME_SET_STCF_CC:
        2:  561:                    CFE_TIME_SetSTCFCmd(MessagePtr);
        2:  562:                    break;
        -:  563:
        -:  564:                case CFE_TIME_SET_LEAPS_CC:
        1:  565:                    CFE_TIME_SetLeapsCmd(MessagePtr);
        1:  566:                    break;
        -:  567:
        -:  568:                case CFE_TIME_ADD_ADJUST_CC:
        2:  569:                    CFE_TIME_AdjustCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        2:  570:                    break;
        -:  571:
        -:  572:                case CFE_TIME_SUB_ADJUST_CC:
        1:  573:                    CFE_TIME_AdjustCmd(MessagePtr,  (int16) CFE_TIME_SUB_ADJUST);
        1:  574:                    break;
        -:  575:
        -:  576:                case CFE_TIME_ADD_1HZADJ_CC:
        1:  577:                    CFE_TIME_1HzAdjCmd(MessagePtr, (int16) CFE_TIME_ADD_ADJUST);
        1:  578:                    break;
        -:  579:
        -:  580:                case CFE_TIME_SUB_1HZADJ_CC:
        1:  581:                    CFE_TIME_1HzAdjCmd(MessagePtr, (int16) CFE_TIME_SUB_ADJUST);
        1:  582:                    break;
        -:  583:
        -:  584:                default:
        -:  585:
        1:  586:                    CFE_TIME_TaskData.ErrCounter++;
        1:  587:                    CFE_EVS_SendEvent(CFE_TIME_CC_ERR_EID, CFE_EVS_ERROR,
        -:  588:                             "Invalid command code -- ID = 0x%X, CC = %d",
        -:  589:                                      MessageID, CommandCode);
        -:  590:                    break;
        -:  591:            } /* switch (CFE_TIME_CMD_MID -- command code)*/
       29:  592:            break;
        -:  593:
        -:  594:        default:
        -:  595:
        -:  596:            /*
        -:  597:            ** Note: we only increment the command error counter when
        -:  598:            **    processing CFE_TIME_CMD_MID commands...
        -:  599:            */
        4:  600:            CFE_EVS_SendEvent(CFE_TIME_ID_ERR_EID, CFE_EVS_ERROR,
        -:  601:                             "Invalid message ID -- ID = 0x%X",
        -:  602:                              MessageID);
        -:  603:            break;
        -:  604:
        -:  605:    } /* switch (message ID) */
        -:  606:
        -:  607:    return;
        -:  608:
        -:  609:} /* End of CFE_TIME_TaskPipe() */
        -:  610:
        -:  611:
        -:  612:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  613:/*                                                                 */
        -:  614:/* CFE_TIME_HousekeepingCmd() -- On-board command (HK request)     */
        -:  615:/*                                                                 */
        -:  616:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  617:
        -:  618:void CFE_TIME_HousekeepingCmd(void)
        1:  619:{
        -:  620:    CFE_TIME_Reference_t Reference;
        -:  621:
        -:  622:    /*
        -:  623:    ** Get reference time values (local time, time at tone, etc.)...
        -:  624:    */
        1:  625:    CFE_TIME_GetReference(&Reference);
        -:  626:
        -:  627:    /*
        -:  628:    ** Update TIME portion of Critical Data Store...
        -:  629:    */
        1:  630:    CFE_TIME_UpdateResetVars(&Reference);
        -:  631:
        -:  632:    /*
        -:  633:    ** Collect housekeeping data from Time Services utilities...
        -:  634:    */
        1:  635:    CFE_TIME_GetHkData(&Reference);
        -:  636:
        -:  637:    /*
        -:  638:    ** Send housekeeping telemetry packet...
        -:  639:    */
        1:  640:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.HkPacket);
        1:  641:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.HkPacket);
        -:  642:
        -:  643:    /*
        -:  644:    ** Note: we only increment the command execution counter when
        -:  645:    **   processing CFE_TIME_CMD_MID commands...
        -:  646:    */
        -:  647:    return;
        -:  648:
        -:  649:} /* End of CFE_TIME_HousekeepingCmd() */
        -:  650:
        -:  651:
        -:  652:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  653:/*                                                                 */
        -:  654:/* CFE_TIME_ToneSignalCmd() -- Time at tone command (signal)       */
        -:  655:/*                                                                 */
        -:  656:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  657:
        -:  658:void CFE_TIME_ToneSignalCmd(void)
        2:  659:{
        -:  660:    /*
        -:  661:    ** Indication that tone signal occurred recently...
        -:  662:    */
        2:  663:    CFE_TIME_ToneSignal();
        -:  664:
        -:  665:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -:  666:      #if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  667:    /*
        -:  668:    ** If we are simulating the tone signal, and we are the time
        -:  669:    **   server, and we have processed the simulated tone, then
        -:  670:    **   send time at the tone data...
        -:  671:    */
        2:  672:    CFE_TIME_ToneSend();
        -:  673:      #endif
        -:  674:    #endif
        -:  675:
        -:  676:    /*
        -:  677:    ** Note: we only increment the command execution counter when
        -:  678:    **   processing CFE_TIME_CMD_MID commands...
        -:  679:    */
        -:  680:    return;
        -:  681:
        -:  682:} /* End of CFE_TIME_ToneSignalCmd() */
        -:  683:
        -:  684:
        -:  685:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  686:/*                                                                 */
        -:  687:/* CFE_TIME_ToneDataCmd() -- Time at tone command (data)           */
        -:  688:/*                                                                 */
        -:  689:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  690:
        -:  691:void CFE_TIME_ToneDataCmd(CFE_SB_MsgPtr_t MessagePtr)
        5:  692:{
        -:  693:    /*
        -:  694:    ** This command packet contains "time at the tone" data...
        -:  695:    */
        5:  696:    CFE_TIME_ToneData((CFE_TIME_ToneDataCmd_t *) MessagePtr);
        -:  697:
        -:  698:    /*
        -:  699:    ** Note: we only increment the command execution counter when
        -:  700:    **   processing CFE_TIME_CMD_MID commands...
        -:  701:    */
        -:  702:    return;
        -:  703:
        -:  704:} /* End of CFE_TIME_ToneDataCmd() */
        -:  705:
        -:  706:
        -:  707:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  708:/*                                                                 */
        -:  709:/* CFE_TIME_FakeToneCmd() -- Simulated time at tone signal         */
        -:  710:/*                                                                 */
        -:  711:/* If we don't have a distributed tone signal and we are in a      */
        -:  712:/*    lab environment where time accuracy isn't important, then    */
        -:  713:/*    we can use a SB message to signal the tone.                  */
        -:  714:/*                                                                 */
        -:  715:/* Both the time server and clients may be configured to use       */
        -:  716:/*    the arrival time of the SB message as the tone (instead      */
        -:  717:/*    of a discrete interrupt signal).                             */
        -:  718:/*                                                                 */
        -:  719:/* This way the actual time of the tone is closer to being in      */
        -:  720:/*    sync and we can ignore the slight delays due to getting      */
        -:  721:/*    the tone command from the SB message queue since it will     */
        -:  722:/*    be the same for the server and clients.                      */
        -:  723:/*                                                                 */
        -:  724:/* This command is sent by the time server (might be us) while     */
        -:  725:/*    processing its local 1Hz interrupt task.                     */
        -:  726:/*                                                                 */
        -:  727:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  728:
        -:  729:#if (CFE_TIME_CFG_FAKE_TONE == TRUE)
        -:  730:void CFE_TIME_FakeToneCmd(void)
        2:  731:{
        -:  732:    /*
        -:  733:    ** Fake the call-back from the "real" h/w ISR...
        -:  734:    */
        2:  735:    CFE_TIME_Tone1HzISR();
        -:  736:
        -:  737:    /*
        -:  738:    ** Note: we only increment the command execution counter when
        -:  739:    **   processing CFE_TIME_CMD_MID commands...
        -:  740:    */
        -:  741:    return;
        -:  742:
        -:  743:} /* End of CFE_TIME_FakeToneCmd() */
        -:  744:#endif /* CFE_TIME_CFG_FAKE_TONE */
        -:  745:
        -:  746:
        -:  747:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  748:/*                                                                 */
        -:  749:/* CFE_TIME_ToneSendCmd() -- Time at tone command (send data)      */
        -:  750:/*                                                                 */
        -:  751:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  752:
        -:  753:#if (CFE_TIME_CFG_SERVER == TRUE)
        -:  754:  #if (CFE_TIME_CFG_SOURCE != TRUE)
        -:  755:    #if (CFE_TIME_CFG_FAKE_TONE != TRUE)
        -:  756:void CFE_TIME_ToneSendCmd(void)
        -:  757:{
        -:  758:    /*
        -:  759:    ** Request for "time at tone" data packet (probably scheduler)...
        -:  760:    */
        -:  761:    CFE_TIME_ToneSend();
        -:  762:
        -:  763:    /*
        -:  764:    ** Note: we only increment the command execution counter when
        -:  765:    **   processing CFE_TIME_CMD_MID commands...
        -:  766:    */
        -:  767:    return;
        -:  768:
        -:  769:} /* End of CFE_TIME_SendCmd() */
        -:  770:    #endif /* CFE_TIME_CFG_SERVER */
        -:  771:  #endif /* not CFE_TIME_CFG_SOURCE */
        -:  772:#endif /* not CFE_TIME_CFG_FAKE_TONE */
        -:  773:
        -:  774:
        -:  775:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  776:/*                                                                 */
        -:  777:/* CFE_TIME_NoopCmd() -- Time task ground command (NO-OP)          */
        -:  778:/*                                                                 */
        -:  779:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  780:
        -:  781:void CFE_TIME_NoopCmd(void)
        1:  782:{
        -:  783:
        1:  784:    CFE_TIME_TaskData.CmdCounter++;
        -:  785:
        1:  786:    CFE_EVS_SendEvent(CFE_TIME_NOOP_EID, CFE_EVS_INFORMATION,
        -:  787:                     "No-op command. cFE Version %d.%d.%d.%d",
        -:  788:                     CFE_MAJOR_VERSION,CFE_MINOR_VERSION,CFE_REVISION,CFE_MISSION_REV);
        -:  789:
        -:  790:    return;
        -:  791:
        -:  792:} /* End of CFE_TIME_NoopCmd() */
        -:  793:
        -:  794:
        -:  795:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  796:/*                                                                 */
        -:  797:/* CFE_TIME_ResetCmd() -- Time task ground command (reset counters)*/
        -:  798:/*                                                                 */
        -:  799:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  800:
        -:  801:void CFE_TIME_ResetCmd(void)
        1:  802:{
        -:  803:
        1:  804:    CFE_TIME_TaskData.CmdCounter = 0;
        1:  805:    CFE_TIME_TaskData.ErrCounter = 0;
        -:  806:
        1:  807:    CFE_TIME_TaskData.ToneMatchCount  = 0;
        1:  808:    CFE_TIME_TaskData.ToneMatchErrors = 0;
        -:  809:
        1:  810:    CFE_TIME_TaskData.ToneSignalCount = 0;
        1:  811:    CFE_TIME_TaskData.ToneDataCount   = 0;
        -:  812:
        1:  813:    CFE_TIME_TaskData.ToneIntCount    = 0;
        1:  814:    CFE_TIME_TaskData.ToneIntErrors   = 0;
        1:  815:    CFE_TIME_TaskData.ToneTaskCount   = 0;
        -:  816:
        1:  817:    CFE_TIME_TaskData.VersionCount    = 0;
        -:  818:
        1:  819:    CFE_TIME_TaskData.LocalIntCount   = 0;
        1:  820:    CFE_TIME_TaskData.LocalTaskCount  = 0;
        -:  821:
        1:  822:    CFE_TIME_TaskData.InternalCount   = 0;
        1:  823:    CFE_TIME_TaskData.ExternalCount   = 0;
        -:  824:
        1:  825:    CFE_EVS_SendEvent(CFE_TIME_RESET_EID, CFE_EVS_DEBUG,
        -:  826:                     "Reset Counters command");
        -:  827:
        -:  828:    return;
        -:  829:
        -:  830:} /* End of CFE_TIME_ResetCmd() */
        -:  831:
        -:  832:
        -:  833:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  834:/*                                                                 */
        -:  835:/* CFE_TIME_DiagCmd() -- Time task ground command (diagnostics)    */
        -:  836:/*                                                                 */
        -:  837:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  838:
        -:  839:void CFE_TIME_DiagCmd(void)
        1:  840:{
        1:  841:    CFE_TIME_TaskData.CmdCounter++;
        -:  842:
        -:  843:    /*
        -:  844:    ** Collect housekeeping data from Time Services utilities...
        -:  845:    */
        1:  846:    CFE_TIME_GetDiagData();
        -:  847:
        -:  848:    /*
        -:  849:    ** Send housekeeping telemetry packet...
        -:  850:    */
        1:  851:    CFE_SB_TimeStampMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.DiagPacket);
        1:  852:    CFE_SB_SendMsg((CFE_SB_Msg_t *) &CFE_TIME_TaskData.DiagPacket);
        -:  853:
        1:  854:    CFE_EVS_SendEvent(CFE_TIME_DIAG_EID, CFE_EVS_DEBUG,
        -:  855:                     "Request diagnostics command");
        -:  856:
        -:  857:    return;
        -:  858:
        -:  859:} /* End of CFE_TIME_DiagCmd() */
        -:  860:
        -:  861:
        -:  862:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  863:/*                                                                 */
        -:  864:/* CFE_TIME_SetStateCmd() -- Time task command (set clock state)   */
        -:  865:/*                                                                 */
        -:  866:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  867:
        -:  868:void CFE_TIME_SetStateCmd(CFE_SB_MsgPtr_t MessagePtr)
        4:  869:{
        4:  870:    CFE_TIME_StateCmd_t *CommandPtr = (CFE_TIME_StateCmd_t *) MessagePtr;
        -:  871:    char *ClockStateText;
        -:  872:
        -:  873:    /*
        -:  874:    ** Verify command argument value (clock state)...
        -:  875:    */
        7:  876:    if ((CommandPtr->ClockState == CFE_TIME_INVALID) ||
        -:  877:        (CommandPtr->ClockState == CFE_TIME_VALID)   ||
        -:  878:        (CommandPtr->ClockState == CFE_TIME_FLYWHEEL))
        -:  879:    {
        3:  880:        CFE_TIME_SetState(CommandPtr->ClockState);
        -:  881:
        -:  882:        /*
        -:  883:        ** Select appropriate text for event message...
        -:  884:        */
        3:  885:        if (CommandPtr->ClockState == CFE_TIME_INVALID)
        -:  886:        {
        1:  887:            ClockStateText = "INVALID";
        -:  888:        }
        2:  889:        else if (CommandPtr->ClockState == CFE_TIME_VALID)
        -:  890:        {
        1:  891:            ClockStateText = "VALID";
        -:  892:        }
        -:  893:        else
        -:  894:        {
        1:  895:            ClockStateText = "FLYWHEEL";
        -:  896:        }
        -:  897:
        3:  898:        CFE_TIME_TaskData.CmdCounter++;
        3:  899:        CFE_EVS_SendEvent(CFE_TIME_STATE_EID, CFE_EVS_INFORMATION,
        -:  900:                         "Set Clock State = %s", ClockStateText);
        -:  901:    }
        -:  902:    else
        -:  903:    {
        1:  904:        CFE_TIME_TaskData.ErrCounter++;
        1:  905:        CFE_EVS_SendEvent(CFE_TIME_STATE_ERR_EID, CFE_EVS_ERROR,
        -:  906:                         "Invalid Clock State = 0x%X", CommandPtr->ClockState);
        -:  907:    }
        -:  908:
        -:  909:    return;
        -:  910:
        -:  911:} /* End of CFE_TIME_SetStateCmd() */
        -:  912:
        -:  913:
        -:  914:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  915:/*                                                                 */
        -:  916:/* CFE_TIME_SetSourceCmd() -- Time task command (set time source)  */
        -:  917:/*                                                                 */
        -:  918:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  919:
        -:  920:void CFE_TIME_SetSourceCmd(CFE_SB_MsgPtr_t MessagePtr)
        3:  921:{
        3:  922:    CFE_TIME_SourceCmd_t *CommandPtr = (CFE_TIME_SourceCmd_t *) MessagePtr;
        -:  923:
        -:  924:    #if (CFE_TIME_CFG_SOURCE == TRUE)
        -:  925:    char *TimeSourceText;
        -:  926:    #endif
        -:  927:
        -:  928:    /*
        -:  929:    ** Verify command argument value (time data source)...
        -:  930:    */
        5:  931:    if ((CommandPtr->TimeSource == CFE_TIME_USE_INTERN) ||
        -:  932:        (CommandPtr->TimeSource == CFE_TIME_USE_EXTERN))
        -:  933:    {
        -:  934:        #if (CFE_TIME_CFG_SOURCE == TRUE)
        -:  935:        /*
        -:  936:        ** Only systems configured to select source of time data...
        -:  937:        */
        -:  938:        CFE_TIME_TaskData.CmdCounter++;
        -:  939:
        -:  940:        CFE_TIME_SetSource(CommandPtr->TimeSource);
        -:  941:
        -:  942:        /*
        -:  943:        ** Select appropriate text for event message...
        -:  944:        */
        -:  945:        if (CommandPtr->TimeSource == CFE_TIME_USE_INTERN)
        -:  946:        {
        -:  947:            TimeSourceText = "INTERNAL";
        -:  948:        }
        -:  949:        else
        -:  950:        {
        -:  951:            TimeSourceText = "EXTERNAL";
        -:  952:        }
        -:  953:
        -:  954:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_EID,
        -:  955:                          CFE_EVS_INFORMATION,
        -:  956:                         "Set Time Source = %s", TimeSourceText);
        -:  957:
        -:  958:        #else /* not CFE_TIME_CFG_SOURCE */
        -:  959:        /*
        -:  960:        ** We want to know if disabled commands are being sent...
        -:  961:        */
        2:  962:        CFE_TIME_TaskData.ErrCounter++;
        -:  963:
        2:  964:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_CFG_EID, CFE_EVS_ERROR,
        -:  965:        "Set Source commands invalid without CFE_TIME_CFG_SOURCE set to TRUE");
        -:  966:
        -:  967:        #endif /* CFE_TIME_CFG_SOURCE */
        -:  968:    }
        -:  969:    else
        -:  970:    {
        -:  971:        /*
        -:  972:        ** Ground system database will prevent most of these errors...
        -:  973:        */
        1:  974:        CFE_TIME_TaskData.ErrCounter++;
        -:  975:
        1:  976:        CFE_EVS_SendEvent(CFE_TIME_SOURCE_ERR_EID, CFE_EVS_ERROR,
        -:  977:                         "Invalid Time Source = 0x%X", CommandPtr->TimeSource);
        -:  978:    }
        -:  979:
        -:  980:    return;
        -:  981:
        -:  982:} /* End of CFE_TIME_SetSourceCmd() */
        -:  983:
        -:  984:
        -:  985:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  986:/*                                                                 */
        -:  987:/* CFE_TIME_SetSignalCmd() -- Time task command (set tone source)  */
        -:  988:/*                                                                 */
        -:  989:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -:  990:
        -:  991:void CFE_TIME_SetSignalCmd(CFE_SB_MsgPtr_t MessagePtr)
        3:  992:{
        3:  993:    CFE_TIME_SignalCmd_t *CommandPtr = (CFE_TIME_SignalCmd_t *) MessagePtr;
        -:  994:
        -:  995:    #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -:  996:    char *ToneSourceText;
        -:  997:    #endif
        -:  998:
        -:  999:    /*
        -: 1000:    ** Verify command argument value (tone source)...
        -: 1001:    */
        5: 1002:    if ((CommandPtr->ToneSource == CFE_TIME_TONE_PRI) ||
        -: 1003:        (CommandPtr->ToneSource == CFE_TIME_TONE_RED))
        -: 1004:    {
        -: 1005:        #if (CFE_TIME_CFG_SIGNAL == TRUE)
        -: 1006:        /*
        -: 1007:        ** Only systems configured to select tone signal...
        -: 1008:        */
        -: 1009:        CFE_TIME_TaskData.CmdCounter++;
        -: 1010:
        -: 1011:        CFE_TIME_SetSignal(CommandPtr->ToneSource);
        -: 1012:
        -: 1013:        /*
        -: 1014:        ** Select appropriate text for event message...
        -: 1015:        */
        -: 1016:        if (CommandPtr->ToneSource == CFE_TIME_TONE_PRI)
        -: 1017:        {
        -: 1018:            ToneSourceText = "PRIMARY";
        -: 1019:        }
        -: 1020:        else
        -: 1021:        {
        -: 1022:            ToneSourceText = "REDUNDANT";
        -: 1023:        }
        -: 1024:
        -: 1025:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_EID,
        -: 1026:                          CFE_EVS_INFORMATION,
        -: 1027:                         "Set Tone Source = %s", ToneSourceText);
        -: 1028:
        -: 1029:        #else /* not CFE_TIME_CFG_SIGNAL */
        -: 1030:        /*
        -: 1031:        ** We want to know if disabled commands are being sent...
        -: 1032:        */
        2: 1033:        CFE_TIME_TaskData.ErrCounter++;
        -: 1034:
        2: 1035:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_CFG_EID, CFE_EVS_ERROR,
        -: 1036:           "Set Signal commands invalid without CFE_TIME_CFG_SIGNAL set to TRUE");
        -: 1037:
        -: 1038:        #endif /* CFE_TIME_CFG_SIGNAL */
        -: 1039:    }
        -: 1040:    else
        -: 1041:    {
        -: 1042:        /*
        -: 1043:        ** Ground system database will prevent most of these errors...
        -: 1044:        */
        1: 1045:        CFE_TIME_TaskData.ErrCounter++;
        -: 1046:
        1: 1047:        CFE_EVS_SendEvent(CFE_TIME_SIGNAL_ERR_EID, CFE_EVS_ERROR,
        -: 1048:                         "Invalid Tone Source = 0x%X", CommandPtr->ToneSource);
        -: 1049:    }
        -: 1050:
        -: 1051:    return;
        -: 1052:
        -: 1053:} /* End of CFE_TIME_SetSignalCmd() */
        -: 1054:
        -: 1055:
        -: 1056:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1057:/*                                                                 */
        -: 1058:/* CFE_TIME_SetDelayCmd() -- Time task ground command (tone delay) */
        -: 1059:/*                                                                 */
        -: 1060:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1061:
        -: 1062:void CFE_TIME_SetDelayCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        3: 1063:{
        3: 1064:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1065:
        -: 1066:    /*
        -: 1067:    ** Verify "micro-seconds" command argument...
        -: 1068:    */
        3: 1069:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1070:    {
        -: 1071:        #if (CFE_TIME_CFG_CLIENT == TRUE)
        -: 1072:
        -: 1073:        CFE_TIME_SysTime_t Delay;
        -: 1074:
        -: 1075:        Delay.Seconds = CommandPtr->Seconds;
        -: 1076:        Delay.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1077:
        -: 1078:        CFE_TIME_SetDelay(Delay, Direction);
        -: 1079:
        -: 1080:        CFE_TIME_TaskData.CmdCounter++;
        -: 1081:        CFE_EVS_SendEvent(CFE_TIME_DELAY_EID, CFE_EVS_INFORMATION,
        -: 1082:           "Set Tone Delay -- secs = %d, usecs = %d, ssecs = 0x%X, dir = %d",
        -: 1083:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1084:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds),
        -: 1085:                          Direction);
        -: 1086:
        -: 1087:        #else /* not CFE_TIME_CFG_CLIENT */
        -: 1088:        /*
        -: 1089:        ** We want to know if disabled commands are being sent...
        -: 1090:        */
        2: 1091:        CFE_TIME_TaskData.ErrCounter++;
        -: 1092:
        2: 1093:        CFE_EVS_SendEvent(CFE_TIME_DELAY_CFG_EID, CFE_EVS_ERROR,
        -: 1094:        "Set Delay commands invalid without CFE_TIME_CFG_CLIENT set to TRUE");
        -: 1095:
        -: 1096:        #endif /* CFE_TIME_CFG_CLIENT */
        -: 1097:    }
        -: 1098:    else
        -: 1099:    {
        1: 1100:        CFE_TIME_TaskData.ErrCounter++;
        1: 1101:        CFE_EVS_SendEvent(CFE_TIME_DELAY_ERR_EID, CFE_EVS_ERROR,
        -: 1102:               "Invalid Tone Delay -- secs = %d, usecs = %d",
        -: 1103:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1104:    }
        -: 1105:
        -: 1106:    return;
        -: 1107:
        -: 1108:} /* End of CFE_TIME_SetDelayCmd() */
        -: 1109:
        -: 1110:
        -: 1111:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1112:/*                                                                 */
        -: 1113:/* CFE_TIME_SetTimeCmd() -- Time task ground command (calc STCF)   */
        -: 1114:/*                                                                 */
        -: 1115:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1116:
        -: 1117:void CFE_TIME_SetTimeCmd(CFE_SB_MsgPtr_t MessagePtr)
        2: 1118:{
        2: 1119:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1120:
        -: 1121:    /*
        -: 1122:    ** Verify "micro-seconds" command argument...
        -: 1123:    */
        2: 1124:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1125:    {
        -: 1126:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1127:
        -: 1128:        CFE_TIME_SysTime_t NewTime;
        -: 1129:
        1: 1130:        NewTime.Seconds = CommandPtr->Seconds;
        1: 1131:        NewTime.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1132:
        1: 1133:        CFE_TIME_SetTime(NewTime);
        -: 1134:
        1: 1135:        CFE_TIME_TaskData.CmdCounter++;
        1: 1136:        CFE_EVS_SendEvent(CFE_TIME_TIME_EID, CFE_EVS_INFORMATION,
        -: 1137:                         "Set Time -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1138:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1139:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1140:
        -: 1141:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1142:        /*
        -: 1143:        ** We want to know if disabled commands are being sent...
        -: 1144:        */
        -: 1145:        CFE_TIME_TaskData.ErrCounter++;
        -: 1146:
        -: 1147:        CFE_EVS_SendEvent(CFE_TIME_TIME_CFG_EID, CFE_EVS_ERROR,
        -: 1148:           "Set Time commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1149:
        -: 1150:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1151:    }
        -: 1152:    else
        -: 1153:    {
        1: 1154:        CFE_TIME_TaskData.ErrCounter++;
        1: 1155:        CFE_EVS_SendEvent(CFE_TIME_TIME_ERR_EID, CFE_EVS_ERROR,
        -: 1156:                         "Invalid Time -- secs = %d, usecs = %d",
        -: 1157:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1158:    }
        -: 1159:
        -: 1160:    return;
        -: 1161:
        -: 1162:} /* End of CFE_TIME_SetTimeCmd() */
        -: 1163:
        -: 1164:
        -: 1165:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1166:/*                                                                 */
        -: 1167:/* CFE_TIME_SetMETCmd() -- Time task ground command (set MET)      */
        -: 1168:/*                                                                 */
        -: 1169:/* Note: This command will not have lasting effect if configured   */
        -: 1170:/*       to get external time of type MET.  Also, there cannot     */
        -: 1171:/*       be a local h/w MET and an external MET since both would   */
        -: 1172:/*       need to be synchronized to the same tone signal.          */
        -: 1173:/*                                                                 */
        -: 1174:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1175:
        -: 1176:void CFE_TIME_SetMETCmd(CFE_SB_MsgPtr_t MessagePtr)
        2: 1177:{
        2: 1178:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1179:
        -: 1180:    /*
        -: 1181:    ** Verify "micro-seconds" command argument...
        -: 1182:    */
        2: 1183:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1184:    {
        -: 1185:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1186:
        -: 1187:        CFE_TIME_SysTime_t NewMET;
        -: 1188:
        1: 1189:        NewMET.Seconds = CommandPtr->Seconds;
        1: 1190:        NewMET.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1191:
        1: 1192:        CFE_TIME_SetMET(NewMET);
        -: 1193:
        1: 1194:        CFE_TIME_TaskData.CmdCounter++;
        1: 1195:        CFE_EVS_SendEvent(CFE_TIME_MET_EID, CFE_EVS_INFORMATION,
        -: 1196:                         "Set MET -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1197:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1198:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1199:
        -: 1200:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1201:        /*
        -: 1202:        ** We want to know if disabled commands are being sent...
        -: 1203:        */
        -: 1204:        CFE_TIME_TaskData.ErrCounter++;
        -: 1205:
        -: 1206:        CFE_EVS_SendEvent(CFE_TIME_MET_CFG_EID, CFE_EVS_ERROR,
        -: 1207:           "Set MET commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1208:
        -: 1209:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1210:    }
        -: 1211:    else
        -: 1212:    {
        1: 1213:        CFE_TIME_TaskData.ErrCounter++;
        1: 1214:        CFE_EVS_SendEvent(CFE_TIME_MET_ERR_EID, CFE_EVS_ERROR,
        -: 1215:                         "Invalid MET -- secs = %d, usecs = %d",
        -: 1216:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1217:    }
        -: 1218:
        -: 1219:    return;
        -: 1220:
        -: 1221:} /* End of CFE_TIME_SetMETCmd() */
        -: 1222:
        -: 1223:
        -: 1224:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1225:/*                                                                 */
        -: 1226:/* CFE_TIME_SetSTCFCmd() -- Time task ground command (set STCF)    */
        -: 1227:/*                                                                 */
        -: 1228:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1229:
        -: 1230:void CFE_TIME_SetSTCFCmd(CFE_SB_MsgPtr_t MessagePtr)
        2: 1231:{
        2: 1232:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1233:
        -: 1234:    /*
        -: 1235:    ** Verify "micro-seconds" command argument...
        -: 1236:    */
        2: 1237:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1238:    {
        -: 1239:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1240:
        -: 1241:        CFE_TIME_SysTime_t NewSTCF;
        -: 1242:
        1: 1243:        NewSTCF.Seconds = CommandPtr->Seconds;
        1: 1244:        NewSTCF.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1245:
        1: 1246:        CFE_TIME_SetSTCF(NewSTCF);
        -: 1247:
        1: 1248:        CFE_TIME_TaskData.CmdCounter++;
        1: 1249:        CFE_EVS_SendEvent(CFE_TIME_STCF_EID, CFE_EVS_INFORMATION,
        -: 1250:                         "Set STCF -- secs = %d, usecs = %d, ssecs = 0x%X",
        -: 1251:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1252:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds));
        -: 1253:
        -: 1254:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1255:        /*
        -: 1256:        ** We want to know if disabled commands are being sent...
        -: 1257:        */
        -: 1258:        CFE_TIME_TaskData.ErrCounter++;
        -: 1259:
        -: 1260:        CFE_EVS_SendEvent(CFE_TIME_STCF_CFG_EID, CFE_EVS_ERROR,
        -: 1261:           "Set STCF commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1262:
        -: 1263:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1264:    }
        -: 1265:    else
        -: 1266:    {
        1: 1267:        CFE_TIME_TaskData.ErrCounter++;
        1: 1268:        CFE_EVS_SendEvent(CFE_TIME_STCF_ERR_EID, CFE_EVS_ERROR,
        -: 1269:                         "Invalid STCF -- secs = %d, usecs = %d",
        -: 1270:                          CommandPtr->Seconds, CommandPtr->MicroSeconds);
        -: 1271:    }
        -: 1272:
        -: 1273:    return;
        -: 1274:
        -: 1275:} /* End of CFE_TIME_SetSTCFCmd() */
        -: 1276:
        -: 1277:
        -: 1278:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1279:/*                                                                 */
        -: 1280:/* CFE_TIME_SetLeapsCmd() -- Time task ground command (set leaps)  */
        -: 1281:/*                                                                 */
        -: 1282:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1283:
        -: 1284:void CFE_TIME_SetLeapsCmd(CFE_SB_MsgPtr_t MessagePtr)
        1: 1285:{
        -: 1286:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1287:
        1: 1288:    CFE_TIME_LeapsCmd_t *CommandPtr = (CFE_TIME_LeapsCmd_t *) MessagePtr;
        -: 1289:
        -: 1290:    /*
        -: 1291:    ** No value checking (leaps may be positive or negative)...
        -: 1292:    */
        1: 1293:    CFE_TIME_SetLeaps(CommandPtr->LeapSeconds);
        -: 1294:
        1: 1295:    CFE_TIME_TaskData.CmdCounter++;
        -: 1296:
        1: 1297:    CFE_EVS_SendEvent(CFE_TIME_LEAPS_EID, CFE_EVS_INFORMATION,
        -: 1298:                     "Set Leap Seconds = %d", CommandPtr->LeapSeconds);
        -: 1299:
        -: 1300:    #else /* not CFE_TIME_CFG_SERVER */
        -: 1301:    /*
        -: 1302:    ** We want to know if disabled commands are being sent...
        -: 1303:    */
        -: 1304:    CFE_TIME_TaskData.ErrCounter++;
        -: 1305:
        -: 1306:    CFE_EVS_SendEvent(CFE_TIME_LEAPS_CFG_EID, CFE_EVS_ERROR,
        -: 1307:       "Set Leaps commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1308:
        -: 1309:    #endif /* CFE_TIME_CFG_SERVER */
        -: 1310:
        -: 1311:    return;
        -: 1312:
        -: 1313:} /* End of CFE_TIME_SetLeapsCmd() */
        -: 1314:
        -: 1315:
        -: 1316:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1317:/*                                                                 */
        -: 1318:/* CFE_TIME_AdjustCmd() -- Time task ground command (adjust STCF)  */
        -: 1319:/*                                                                 */
        -: 1320:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1321:
        -: 1322:void CFE_TIME_AdjustCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        3: 1323:{
        3: 1324:    CFE_TIME_TimeCmd_t *CommandPtr = (CFE_TIME_TimeCmd_t *) MessagePtr;
        -: 1325:
        -: 1326:    /*
        -: 1327:    ** Verify command arguments...
        -: 1328:    */
        3: 1329:    if (CommandPtr->MicroSeconds < 1000000)
        -: 1330:    {
        -: 1331:        #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1332:
        -: 1333:        CFE_TIME_SysTime_t Adjust;
        -: 1334:
        2: 1335:        Adjust.Seconds = CommandPtr->Seconds;
        2: 1336:        Adjust.Subseconds = CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds);
        -: 1337:
        2: 1338:        CFE_TIME_SetAdjust(Adjust, Direction);
        -: 1339:
        2: 1340:        CFE_TIME_TaskData.CmdCounter++;
        2: 1341:        CFE_EVS_SendEvent(CFE_TIME_DELTA_EID, CFE_EVS_INFORMATION,
        -: 1342:           "STCF Adjust -- secs = %d, usecs = %d, ssecs = 0x%X, dir[1=Pos, 2=Neg] = %d",
        -: 1343:                          CommandPtr->Seconds, CommandPtr->MicroSeconds,
        -: 1344:                          CFE_TIME_Micro2SubSecs(CommandPtr->MicroSeconds),
        -: 1345:                          Direction);
        -: 1346:
        -: 1347:        #else /* not CFE_TIME_CFG_SERVER */
        -: 1348:        /*
        -: 1349:        ** We want to know if disabled commands are being sent...
        -: 1350:        */
        -: 1351:        CFE_TIME_TaskData.ErrCounter++;
        -: 1352:
        -: 1353:        CFE_EVS_SendEvent(CFE_TIME_DELTA_CFG_EID, CFE_EVS_ERROR,
        -: 1354:           "STCF Adjust commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1355:
        -: 1356:        #endif /* CFE_TIME_CFG_SERVER */
        -: 1357:    }
        -: 1358:    else
        -: 1359:    {
        1: 1360:        CFE_TIME_TaskData.ErrCounter++;
        1: 1361:        CFE_EVS_SendEvent(CFE_TIME_DELTA_ERR_EID, CFE_EVS_ERROR,
        -: 1362:           "Invalid STCF Adjust -- secs = %d, usecs = %d, dir[1=Pos, 2=Neg] = %d",
        -: 1363:                          CommandPtr->Seconds, CommandPtr->MicroSeconds, Direction);
        -: 1364:    }
        -: 1365:
        -: 1366:    return;
        -: 1367:
        -: 1368:} /* End of CFE_TIME_AdjustCmd() */
        -: 1369:
        -: 1370:
        -: 1371:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1372:/*                                                                 */
        -: 1373:/* CFE_TIME_1HzAdjCmd() -- Time task ground command (1Hz adjust)   */
        -: 1374:/*                                                                 */
        -: 1375:/* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */
        -: 1376:
        -: 1377:void CFE_TIME_1HzAdjCmd(CFE_SB_MsgPtr_t MessagePtr, int16 Direction)
        2: 1378:{
        -: 1379:    /*
        -: 1380:    ** 1Hz adjustments are only valid for "Time Servers"...
        -: 1381:    */
        -: 1382:    #if (CFE_TIME_CFG_SERVER == TRUE)
        -: 1383:
        2: 1384:    CFE_TIME_1HzAdjCmd_t *CommandPtr = (CFE_TIME_1HzAdjCmd_t *) MessagePtr;
        -: 1385:    CFE_TIME_SysTime_t Adjust;
        -: 1386:
        2: 1387:    Adjust.Seconds = CommandPtr->Seconds;
        2: 1388:    Adjust.Subseconds = CommandPtr->SubSeconds;
        -: 1389:
        2: 1390:    CFE_TIME_Set1HzAdj(Adjust, Direction);
        -: 1391:
        2: 1392:    CFE_TIME_TaskData.CmdCounter++;
        2: 1393:    CFE_EVS_SendEvent(CFE_TIME_1HZ_EID, CFE_EVS_INFORMATION,
        -: 1394:       "STCF 1Hz Adjust -- secs = %d, ssecs = 0x%X, dir[1=Pos, 2=Neg] = %d",
        -: 1395:                      CommandPtr->Seconds, CommandPtr->SubSeconds, Direction);
        -: 1396:
        -: 1397:    #else /* not CFE_TIME_CFG_SERVER */
        -: 1398:    /*
        -: 1399:    ** We want to know if disabled commands are being sent...
        -: 1400:    */
        -: 1401:    CFE_TIME_TaskData.ErrCounter++;
        -: 1402:
        -: 1403:    CFE_EVS_SendEvent(CFE_TIME_1HZ_CFG_EID, CFE_EVS_ERROR,
        -: 1404:       "1Hz Adjust commands invalid without CFE_TIME_CFG_SERVER set to TRUE");
        -: 1405:
        -: 1406:    #endif /* CFE_TIME_CFG_SERVER */
        -: 1407:
        -: 1408:    return;
        -: 1409:
        -: 1410:} /* End of CFE_TIME_1HzAdjCmd() */
        -: 1411:
        -: 1412:
        -: 1413:/************************/
        -: 1414:/*  End of File Comment */
        -: 1415:/************************/
